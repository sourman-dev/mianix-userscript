{
  "version": 3,
  "sources": ["../../.pnpm/primevue@4.3.5_vue@3.5.17_typescript@5.8.3_/node_modules/src/toggleswitch/style/ToggleSwitchStyle.js", "../../.pnpm/primevue@4.3.5_vue@3.5.17_typescript@5.8.3_/node_modules/src/toggleswitch/BaseToggleSwitch.vue", "../../.pnpm/primevue@4.3.5_vue@3.5.17_typescript@5.8.3_/node_modules/src/toggleswitch/ToggleSwitch.vue", "../../.pnpm/primevue@4.3.5_vue@3.5.17_typescript@5.8.3_/node_modules/src/toggleswitch/ToggleSwitch.vue"],
  "sourcesContent": ["import { style } from '@primeuix/styles/toggleswitch';\nimport BaseStyle from '@primevue/core/base/style';\n\nconst inlineStyles = {\n    root: { position: 'relative' }\n};\n\nconst classes = {\n    root: ({ instance, props }) => [\n        'p-toggleswitch p-component',\n        {\n            'p-toggleswitch-checked': instance.checked,\n            'p-disabled': props.disabled,\n            'p-invalid': instance.$invalid\n        }\n    ],\n    input: 'p-toggleswitch-input',\n    slider: 'p-toggleswitch-slider',\n    handle: 'p-toggleswitch-handle'\n};\n\nexport default BaseStyle.extend({\n    name: 'toggleswitch',\n    style,\n    classes,\n    inlineStyles\n});\n", "<script>\nimport BaseEditableHolder from '@primevue/core/baseeditableholder';\nimport ToggleSwitchStyle from 'primevue/toggleswitch/style';\n\nexport default {\n    name: 'BaseToggleSwitch',\n    extends: BaseEditableHolder,\n    props: {\n        trueValue: {\n            type: null,\n            default: true\n        },\n        falseValue: {\n            type: null,\n            default: false\n        },\n        readonly: {\n            type: Boolean,\n            default: false\n        },\n        tabindex: {\n            type: Number,\n            default: null\n        },\n        inputId: {\n            type: String,\n            default: null\n        },\n        inputClass: {\n            type: [String, Object],\n            default: null\n        },\n        inputStyle: {\n            type: Object,\n            default: null\n        },\n        ariaLabelledby: {\n            type: String,\n            default: null\n        },\n        ariaLabel: {\n            type: String,\n            default: null\n        }\n    },\n    style: ToggleSwitchStyle,\n    provide() {\n        return {\n            $pcToggleSwitch: this,\n            $parentInstance: this\n        };\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" v-bind=\"getPTOptions('root')\" :data-p-checked=\"checked\" :data-p-disabled=\"disabled\" :data-p=\"dataP\">\n        <input\n            :id=\"inputId\"\n            type=\"checkbox\"\n            role=\"switch\"\n            :class=\"[cx('input'), inputClass]\"\n            :style=\"inputStyle\"\n            :checked=\"checked\"\n            :tabindex=\"tabindex\"\n            :disabled=\"disabled\"\n            :readonly=\"readonly\"\n            :aria-checked=\"checked\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :aria-invalid=\"invalid || undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @change=\"onChange\"\n            v-bind=\"getPTOptions('input')\"\n        />\n        <div :class=\"cx('slider')\" v-bind=\"getPTOptions('slider')\" :data-p=\"dataP\">\n            <div :class=\"cx('handle')\" v-bind=\"getPTOptions('handle')\" :data-p=\"dataP\">\n                <slot name=\"handle\" :checked=\"checked\" />\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport BaseToggleSwitch from './BaseToggleSwitch.vue';\n\nexport default {\n    name: 'ToggleSwitch',\n    extends: BaseToggleSwitch,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    checked: this.checked,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                const newValue = this.checked ? this.falseValue : this.trueValue;\n\n                this.writeValue(newValue, event);\n                this.$emit('change', event);\n            }\n        },\n        onFocus(event) {\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.$emit('blur', event);\n            this.formField.onBlur?.(event);\n        }\n    },\n    computed: {\n        checked() {\n            return this.d_value === this.trueValue;\n        },\n        dataP() {\n            return cn({\n                checked: this.checked,\n                disabled: this.disabled,\n                invalid: this.$invalid\n            });\n        }\n    }\n};\n</script>\n", "<template>\n    <div :class=\"cx('root')\" :style=\"sx('root')\" v-bind=\"getPTOptions('root')\" :data-p-checked=\"checked\" :data-p-disabled=\"disabled\" :data-p=\"dataP\">\n        <input\n            :id=\"inputId\"\n            type=\"checkbox\"\n            role=\"switch\"\n            :class=\"[cx('input'), inputClass]\"\n            :style=\"inputStyle\"\n            :checked=\"checked\"\n            :tabindex=\"tabindex\"\n            :disabled=\"disabled\"\n            :readonly=\"readonly\"\n            :aria-checked=\"checked\"\n            :aria-labelledby=\"ariaLabelledby\"\n            :aria-label=\"ariaLabel\"\n            :aria-invalid=\"invalid || undefined\"\n            @focus=\"onFocus\"\n            @blur=\"onBlur\"\n            @change=\"onChange\"\n            v-bind=\"getPTOptions('input')\"\n        />\n        <div :class=\"cx('slider')\" v-bind=\"getPTOptions('slider')\" :data-p=\"dataP\">\n            <div :class=\"cx('handle')\" v-bind=\"getPTOptions('handle')\" :data-p=\"dataP\">\n                <slot name=\"handle\" :checked=\"checked\" />\n            </div>\n        </div>\n    </div>\n</template>\n\n<script>\nimport { cn } from '@primeuix/utils';\nimport BaseToggleSwitch from './BaseToggleSwitch.vue';\n\nexport default {\n    name: 'ToggleSwitch',\n    extends: BaseToggleSwitch,\n    inheritAttrs: false,\n    emits: ['change', 'focus', 'blur'],\n    methods: {\n        getPTOptions(key) {\n            const _ptm = key === 'root' ? this.ptmi : this.ptm;\n\n            return _ptm(key, {\n                context: {\n                    checked: this.checked,\n                    disabled: this.disabled\n                }\n            });\n        },\n        onChange(event) {\n            if (!this.disabled && !this.readonly) {\n                const newValue = this.checked ? this.falseValue : this.trueValue;\n\n                this.writeValue(newValue, event);\n                this.$emit('change', event);\n            }\n        },\n        onFocus(event) {\n            this.$emit('focus', event);\n        },\n        onBlur(event) {\n            this.$emit('blur', event);\n            this.formField.onBlur?.(event);\n        }\n    },\n    computed: {\n        checked() {\n            return this.d_value === this.trueValue;\n        },\n        dataP() {\n            return cn({\n                checked: this.checked,\n                disabled: this.disabled,\n                invalid: this.$invalid\n            });\n        }\n    }\n};\n</script>\n"],
  "mappings": "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",
  "names": ["inlineStyles", "root", "position", "classes", "_ref", "instance", "props", "checked", "disabled", "$invalid", "input", "slider", "handle", "BaseStyle", "extend", "name", "style", "name", "BaseEditableHolder", "props", "trueValue", "type", "falseValue", "readonly", "Boolean", "tabindex", "Number", "inputId", "String", "inputClass", "Object", "inputStyle", "ariaLabelledby", "ariaLabel", "style", "ToggleSwitchStyle", "provide", "$pcToggleSwitch", "$parentInstance", "script", "BaseToggleSwitch", "inheritAttrs", "emits", "methods", "getPTOptions", "key", "_ptm", "ptmi", "ptm", "context", "checked", "disabled", "onChange", "event", "newValue", "writeValue", "$emit", "onFocus", "onBlur", "_this$formField$onBlu", "_this$formField", "formField", "call", "computed", "d_value", "dataP", "cn", "invalid", "$invalid", "_openBlock", "_createElementBlock", "_mergeProps", "_ctx", "cx", "sx", "$options", "_createElementVNode", "id", "role", "undefined", "apply", "arguments", "_hoisted_2", "_renderSlot", "$slots"]
}
