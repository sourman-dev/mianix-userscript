import type { SqliteDb } from './adapter-types.js';
import type { EventDef, Materializer } from './schema/EventDef.js';
import type * as LiveStoreEvent from './schema/LiveStoreEvent.js';
import type { PreparedBindValues } from './util.js';
export declare const getExecArgsFromEvent: ({ eventDef, materializer, db, event, }: {
    eventDef: EventDef.AnyWithoutFn;
    materializer: Materializer;
    db: SqliteDb;
    /** Both encoded and decoded events are supported to reduce the number of times we need to decode/encode */
    event: {
        decoded: LiveStoreEvent.AnyDecoded | LiveStoreEvent.PartialAnyDecoded;
        encoded: undefined;
    } | {
        decoded: undefined;
        encoded: LiveStoreEvent.AnyEncoded | LiveStoreEvent.PartialAnyEncoded;
    };
}) => ReadonlyArray<{
    statementSql: string;
    bindValues: PreparedBindValues;
    writeTables: ReadonlySet<string> | undefined;
}>;
export declare const replaceSessionIdSymbol: (bindValues: Record<string, unknown> | ReadonlyArray<unknown>, sessionId: string) => void;
//# sourceMappingURL=materializer-helper.d.ts.map