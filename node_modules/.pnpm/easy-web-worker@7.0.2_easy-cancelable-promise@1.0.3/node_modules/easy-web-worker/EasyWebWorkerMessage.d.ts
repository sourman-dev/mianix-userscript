import type { CancelablePromise, TDecoupledCancelablePromise } from 'easy-cancelable-promise';
/**
 * This class represents a message that will be send to a worker
 */
export declare class EasyWebWorkerMessage<TPayload = null, TResult = void> {
    /**
     * This is the message id, it's generated automatically
     */
    readonly messageId: string;
    /**
     * When present, this means that the message was resolved
     */
    readonly resolved?: {
        payload: [TPayload?];
    };
    /**
     * When present, this means that the message was rejected
     * */
    readonly rejected?: {
        reason: unknown;
    };
    /**
     * When present, this means that the message was canceled
     * */
    readonly canceled?: {
        reason: unknown;
    };
    /**
     * Decoupled promise that will be resolved when the message is completed
     * The decoupled promise is a promise that can be resolved, rejected or canceled from outside
     */
    readonly decoupledPromise: TDecoupledCancelablePromise<TResult> & {
        _cancel?: (reason?: unknown) => CancelablePromise<TResult>;
    };
    constructor();
}
