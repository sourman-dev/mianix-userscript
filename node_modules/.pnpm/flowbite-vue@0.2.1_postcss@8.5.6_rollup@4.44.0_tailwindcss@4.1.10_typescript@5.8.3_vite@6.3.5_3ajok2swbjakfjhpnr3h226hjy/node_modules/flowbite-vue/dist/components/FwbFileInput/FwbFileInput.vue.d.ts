interface FileInputProps {
    accept?: string;
    dropzone?: boolean;
    label?: string;
    modelValue?: File | File[] | null;
    multiple?: boolean;
    size?: string;
}
declare const dropZoneText: import("vue").ComputedRef<string>;
declare const model: import("vue").WritableComputedRef<File | File[] | null, File | File[] | null>;
declare const handleChange: (event: Event) => void;
declare const dropFileHandler: (event: DragEvent) => void;
declare const dragOverHandler: (event: Event) => void;
declare const dropzoneLabelClasses: import("vue").ComputedRef<string>, dropzoneTextClasses: import("vue").ComputedRef<string>, dropzoneWrapClasses: import("vue").ComputedRef<string>, fileInpClasses: import("vue").ComputedRef<string>, labelClasses: import("vue").ComputedRef<string>;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_1: {}, __VLS_3: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    default?: (props: typeof __VLS_1) => any;
} & {
    default?: (props: typeof __VLS_3) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<FileInputProps, {
    dropZoneText: typeof dropZoneText;
    model: typeof model;
    handleChange: typeof handleChange;
    dropFileHandler: typeof dropFileHandler;
    dragOverHandler: typeof dragOverHandler;
    dropzoneLabelClasses: typeof dropzoneLabelClasses;
    dropzoneTextClasses: typeof dropzoneTextClasses;
    dropzoneWrapClasses: typeof dropzoneWrapClasses;
    fileInpClasses: typeof fileInpClasses;
    labelClasses: typeof labelClasses;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<FileInputProps> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {
    label: string;
    size: string;
    modelValue: File | File[] | null;
    accept: string;
    dropzone: boolean;
    multiple: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<FileInputProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<FileInputProps> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {
    label: string;
    size: string;
    modelValue: File | File[] | null;
    accept: string;
    dropzone: boolean;
    multiple: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
