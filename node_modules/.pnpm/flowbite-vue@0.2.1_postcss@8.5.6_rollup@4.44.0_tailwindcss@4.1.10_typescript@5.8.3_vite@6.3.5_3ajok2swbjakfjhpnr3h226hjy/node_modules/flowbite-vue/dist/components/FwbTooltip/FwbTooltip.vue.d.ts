import { Tooltip } from 'floating-vue';
import type { TooltipPlacement, TooltipStyle, TooltipTrigger } from './types';
import 'floating-vue/dist/style.css';
interface TooltipProps {
    placement?: TooltipPlacement;
    theme?: TooltipStyle;
    trigger?: TooltipTrigger;
}
declare const theme: import("vue").ComputedRef<string>;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_5: {}, __VLS_7: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    trigger?: (props: typeof __VLS_5) => any;
} & {
    content?: (props: typeof __VLS_7) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<TooltipProps, {
    Tooltip: typeof Tooltip;
    theme: typeof theme;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<TooltipProps> & Readonly<{}>, {
    trigger: TooltipTrigger;
    placement: TooltipPlacement;
    theme: TooltipStyle;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<TooltipProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<TooltipProps> & Readonly<{}>, {
    trigger: TooltipTrigger;
    placement: TooltipPlacement;
    theme: TooltipStyle;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
