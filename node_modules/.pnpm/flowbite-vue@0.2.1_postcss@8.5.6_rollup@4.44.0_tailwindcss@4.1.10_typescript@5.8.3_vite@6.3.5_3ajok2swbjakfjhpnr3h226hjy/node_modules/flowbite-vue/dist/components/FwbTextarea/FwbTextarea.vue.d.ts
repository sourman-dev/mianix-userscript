import type { CommonAutoFill } from './../FwbInput/types';
interface TextareaProps {
    modelValue?: string;
    label?: string;
    rows?: number;
    custom?: boolean;
    placeholder?: string;
    autocomplete?: CommonAutoFill;
}
declare const model: import("vue").WritableComputedRef<string, string>;
declare const textareaClasses: import("vue").ComputedRef<string>, labelClasses: import("vue").ComputedRef<string>, wrapperClasses: import("vue").ComputedRef<"" | "block w-full mb-4 border border-gray-200 rounded-lg bg-gray-50 dark:bg-gray-700 dark:border-gray-600">, footerClasses: import("vue").ComputedRef<string>;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_1: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    footer?: (props: typeof __VLS_1) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<TextareaProps, {
    model: typeof model;
    textareaClasses: typeof textareaClasses;
    labelClasses: typeof labelClasses;
    wrapperClasses: typeof wrapperClasses;
    footerClasses: typeof footerClasses;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<TextareaProps> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {
    label: string;
    placeholder: string;
    modelValue: string;
    autocomplete: CommonAutoFill;
    rows: number;
    custom: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<TextareaProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<TextareaProps> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
}>, {
    label: string;
    placeholder: string;
    modelValue: string;
    autocomplete: CommonAutoFill;
    rows: number;
    custom: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
