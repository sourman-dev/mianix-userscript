import type { ButtonGradient, ButtonMonochromeGradient, ButtonSize, ButtonVariant } from './types';
import FwbSpinner from '../../components/FwbSpinner/FwbSpinner.vue';
interface ButtonProps {
    class?: string | object;
    color?: ButtonVariant;
    gradient?: ButtonGradient | null;
    size?: ButtonSize;
    shadow?: ButtonMonochromeGradient | boolean;
    pill?: boolean;
    square?: boolean;
    outline?: boolean;
    loading?: boolean;
    loadingPosition?: 'suffix' | 'prefix';
    disabled?: boolean;
    href?: string;
    tag?: string;
}
declare const wrapperClasses: import("vue").ComputedRef<string>;
declare const spanClasses: import("vue").ComputedRef<string>;
declare const isOutlineGradient: import("vue").ComputedRef<false | ButtonGradient | null>;
declare const loadingPrefix: import("vue").ComputedRef<boolean>;
declare const loadingSuffix: import("vue").ComputedRef<boolean>;
declare const spinnerColor: import("vue").Ref<import("../FwbSpinner/types").SpinnerColor, import("../FwbSpinner/types").SpinnerColor>, spinnerSize: import("vue").Ref<import("../FwbSpinner/types").SpinnerSize, import("../FwbSpinner/types").SpinnerSize>;
declare const buttonComponent: string | import("vue").ConcreteComponent<{}, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, {}, any>;
declare const linkAttr: string;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_9: {}, __VLS_14: {}, __VLS_16: {}, __VLS_21: {}, __VLS_26: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    prefix?: (props: typeof __VLS_9) => any;
} & {
    prefix?: (props: typeof __VLS_14) => any;
} & {
    default?: (props: typeof __VLS_16) => any;
} & {
    suffix?: (props: typeof __VLS_21) => any;
} & {
    suffix?: (props: typeof __VLS_26) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<ButtonProps, {
    FwbSpinner: typeof FwbSpinner;
    wrapperClasses: typeof wrapperClasses;
    spanClasses: typeof spanClasses;
    isOutlineGradient: typeof isOutlineGradient;
    loadingPrefix: typeof loadingPrefix;
    loadingSuffix: typeof loadingSuffix;
    spinnerColor: typeof spinnerColor;
    spinnerSize: typeof spinnerSize;
    buttonComponent: typeof buttonComponent;
    linkAttr: typeof linkAttr;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<ButtonProps> & Readonly<{}>, {
    class: string | object;
    size: ButtonSize;
    href: string;
    color: ButtonVariant;
    gradient: ButtonGradient | null;
    shadow: ButtonMonochromeGradient | boolean;
    pill: boolean;
    square: boolean;
    outline: boolean;
    loading: boolean;
    loadingPosition: "suffix" | "prefix";
    disabled: boolean;
    tag: string;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<ButtonProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<ButtonProps> & Readonly<{}>, {
    class: string | object;
    size: ButtonSize;
    href: string;
    color: ButtonVariant;
    gradient: ButtonGradient | null;
    shadow: ButtonMonochromeGradient | boolean;
    pill: boolean;
    square: boolean;
    outline: boolean;
    loading: boolean;
    loadingPosition: "suffix" | "prefix";
    disabled: boolean;
    tag: string;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
