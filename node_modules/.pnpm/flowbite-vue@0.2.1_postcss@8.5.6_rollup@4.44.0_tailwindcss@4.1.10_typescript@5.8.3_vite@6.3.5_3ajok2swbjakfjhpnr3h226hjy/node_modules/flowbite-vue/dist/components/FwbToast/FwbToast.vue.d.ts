import { type PropType } from 'vue';
import type { ToastAlign, ToastType } from './types';
import FlowbiteThemableChild from '../../components/utils/FlowbiteThemable/FlowbiteThemableChild.vue';
declare const visible: import("vue").Ref<boolean, boolean>;
declare const typeClasses: import("vue").Ref<string, string>, wrapperClasses: import("vue").Ref<string, string>, contentClasses: import("vue").Ref<string, string>;
declare const onClose: () => void;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_4: {
    class: {
        'ml-3': boolean;
    };
}, __VLS_6: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    icon?: (props: typeof __VLS_4) => any;
} & {
    default?: (props: typeof __VLS_6) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    type: {
        type: PropType<ToastType>;
        default: string;
    };
    alignment: {
        type: PropType<ToastAlign>;
        default: string;
    };
    closable: {
        type: BooleanConstructor;
        default: boolean;
    };
    divide: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {
    FlowbiteThemableChild: typeof FlowbiteThemableChild;
    visible: typeof visible;
    typeClasses: typeof typeClasses;
    wrapperClasses: typeof wrapperClasses;
    contentClasses: typeof contentClasses;
    onClose: typeof onClose;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    close: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: PropType<ToastType>;
        default: string;
    };
    alignment: {
        type: PropType<ToastAlign>;
        default: string;
    };
    closable: {
        type: BooleanConstructor;
        default: boolean;
    };
    divide: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{
    onClose?: ((...args: any[]) => any) | undefined;
}>, {
    type: ToastType;
    closable: boolean;
    alignment: ToastAlign;
    divide: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    type: {
        type: PropType<ToastType>;
        default: string;
    };
    alignment: {
        type: PropType<ToastAlign>;
        default: string;
    };
    closable: {
        type: BooleanConstructor;
        default: boolean;
    };
    divide: {
        type: BooleanConstructor;
        default: boolean;
    };
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    close: (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    type: {
        type: PropType<ToastType>;
        default: string;
    };
    alignment: {
        type: PropType<ToastAlign>;
        default: string;
    };
    closable: {
        type: BooleanConstructor;
        default: boolean;
    };
    divide: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & Readonly<{
    onClose?: ((...args: any[]) => any) | undefined;
}>, {
    type: ToastType;
    closable: boolean;
    alignment: ToastAlign;
    divide: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
