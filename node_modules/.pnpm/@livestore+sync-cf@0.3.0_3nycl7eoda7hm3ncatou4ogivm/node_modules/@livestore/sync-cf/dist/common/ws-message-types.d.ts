import { Schema } from '@livestore/utils/effect';
export declare const PullReq: Schema.Struct<{
    _tag: Schema.tag<"WSMessage.PullReq">;
} & {
    requestId: typeof Schema.String;
    /** Omitting the cursor will start from the beginning */
    cursor: Schema.optional<typeof Schema.Number>;
}>;
export type PullReq = typeof PullReq.Type;
export declare const SyncMetadata: Schema.Struct<{
    /** ISO date format */
    createdAt: typeof Schema.String;
}>;
export type SyncMetadata = typeof SyncMetadata.Type;
export declare const PullRes: Schema.Struct<{
    _tag: Schema.tag<"WSMessage.PullRes">;
} & {
    batch: Schema.Array$<Schema.Struct<{
        eventEncoded: Schema.Struct<{
            name: typeof Schema.String;
            args: typeof Schema.Any;
            seqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
            parentSeqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
            clientId: typeof Schema.String;
            sessionId: typeof Schema.String;
        }>;
        metadata: Schema.Option<Schema.Struct<{
            /** ISO date format */
            createdAt: typeof Schema.String;
        }>>;
    }>>;
    requestId: Schema.Struct<{
        context: Schema.Literal<["pull", "push"]>;
        requestId: typeof Schema.String;
    }>;
    remaining: typeof Schema.Number;
}>;
export type PullRes = typeof PullRes.Type;
export declare const PushReq: Schema.Struct<{
    _tag: Schema.tag<"WSMessage.PushReq">;
} & {
    requestId: typeof Schema.String;
    batch: Schema.Array$<Schema.Struct<{
        name: typeof Schema.String;
        args: typeof Schema.Any;
        seqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        parentSeqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        clientId: typeof Schema.String;
        sessionId: typeof Schema.String;
    }>>;
}>;
export type PushReq = typeof PushReq.Type;
export declare const PushAck: Schema.Struct<{
    _tag: Schema.tag<"WSMessage.PushAck">;
} & {
    requestId: typeof Schema.String;
}>;
export type PushAck = typeof PushAck.Type;
export declare const Error: Schema.Struct<{
    _tag: Schema.tag<"WSMessage.Error">;
} & {
    requestId: typeof Schema.String;
    message: typeof Schema.String;
}>;
export type Error = typeof Error.Type;
export declare const Ping: Schema.Struct<{
    _tag: Schema.tag<"WSMessage.Ping">;
} & {
    requestId: Schema.Literal<["ping"]>;
}>;
export type Ping = typeof Ping.Type;
export declare const Pong: Schema.Struct<{
    _tag: Schema.tag<"WSMessage.Pong">;
} & {
    requestId: Schema.Literal<["ping"]>;
}>;
export type Pong = typeof Pong.Type;
export declare const AdminResetRoomReq: Schema.Struct<{
    _tag: Schema.tag<"WSMessage.AdminResetRoomReq">;
} & {
    requestId: typeof Schema.String;
    adminSecret: typeof Schema.String;
}>;
export type AdminResetRoomReq = typeof AdminResetRoomReq.Type;
export declare const AdminResetRoomRes: Schema.Struct<{
    _tag: Schema.tag<"WSMessage.AdminResetRoomRes">;
} & {
    requestId: typeof Schema.String;
}>;
export type AdminResetRoomRes = typeof AdminResetRoomRes.Type;
export declare const AdminInfoReq: Schema.Struct<{
    _tag: Schema.tag<"WSMessage.AdminInfoReq">;
} & {
    requestId: typeof Schema.String;
    adminSecret: typeof Schema.String;
}>;
export type AdminInfoReq = typeof AdminInfoReq.Type;
export declare const AdminInfoRes: Schema.Struct<{
    _tag: Schema.tag<"WSMessage.AdminInfoRes">;
} & {
    requestId: typeof Schema.String;
    info: Schema.Struct<{
        durableObjectId: typeof Schema.String;
    }>;
}>;
export type AdminInfoRes = typeof AdminInfoRes.Type;
export declare const Message: Schema.Union<[Schema.Struct<{
    _tag: Schema.tag<"WSMessage.PullReq">;
} & {
    requestId: typeof Schema.String;
    /** Omitting the cursor will start from the beginning */
    cursor: Schema.optional<typeof Schema.Number>;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.PullRes">;
} & {
    batch: Schema.Array$<Schema.Struct<{
        eventEncoded: Schema.Struct<{
            name: typeof Schema.String;
            args: typeof Schema.Any;
            seqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
            parentSeqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
            clientId: typeof Schema.String;
            sessionId: typeof Schema.String;
        }>;
        metadata: Schema.Option<Schema.Struct<{
            /** ISO date format */
            createdAt: typeof Schema.String;
        }>>;
    }>>;
    requestId: Schema.Struct<{
        context: Schema.Literal<["pull", "push"]>;
        requestId: typeof Schema.String;
    }>;
    remaining: typeof Schema.Number;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.PushReq">;
} & {
    requestId: typeof Schema.String;
    batch: Schema.Array$<Schema.Struct<{
        name: typeof Schema.String;
        args: typeof Schema.Any;
        seqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        parentSeqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        clientId: typeof Schema.String;
        sessionId: typeof Schema.String;
    }>>;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.PushAck">;
} & {
    requestId: typeof Schema.String;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.Error">;
} & {
    requestId: typeof Schema.String;
    message: typeof Schema.String;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.Ping">;
} & {
    requestId: Schema.Literal<["ping"]>;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.Pong">;
} & {
    requestId: Schema.Literal<["ping"]>;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.AdminResetRoomReq">;
} & {
    requestId: typeof Schema.String;
    adminSecret: typeof Schema.String;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.AdminResetRoomRes">;
} & {
    requestId: typeof Schema.String;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.AdminInfoReq">;
} & {
    requestId: typeof Schema.String;
    adminSecret: typeof Schema.String;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.AdminInfoRes">;
} & {
    requestId: typeof Schema.String;
    info: Schema.Struct<{
        durableObjectId: typeof Schema.String;
    }>;
}>]>;
export type Message = typeof Message.Type;
export type MessageEncoded = typeof Message.Encoded;
export declare const BackendToClientMessage: Schema.Union<[Schema.Struct<{
    _tag: Schema.tag<"WSMessage.PullRes">;
} & {
    batch: Schema.Array$<Schema.Struct<{
        eventEncoded: Schema.Struct<{
            name: typeof Schema.String;
            args: typeof Schema.Any;
            seqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
            parentSeqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
            clientId: typeof Schema.String;
            sessionId: typeof Schema.String;
        }>;
        metadata: Schema.Option<Schema.Struct<{
            /** ISO date format */
            createdAt: typeof Schema.String;
        }>>;
    }>>;
    requestId: Schema.Struct<{
        context: Schema.Literal<["pull", "push"]>;
        requestId: typeof Schema.String;
    }>;
    remaining: typeof Schema.Number;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.PushAck">;
} & {
    requestId: typeof Schema.String;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.AdminResetRoomRes">;
} & {
    requestId: typeof Schema.String;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.AdminInfoRes">;
} & {
    requestId: typeof Schema.String;
    info: Schema.Struct<{
        durableObjectId: typeof Schema.String;
    }>;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.Error">;
} & {
    requestId: typeof Schema.String;
    message: typeof Schema.String;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.Pong">;
} & {
    requestId: Schema.Literal<["ping"]>;
}>]>;
export type BackendToClientMessage = typeof BackendToClientMessage.Type;
export declare const ClientToBackendMessage: Schema.Union<[Schema.Struct<{
    _tag: Schema.tag<"WSMessage.PullReq">;
} & {
    requestId: typeof Schema.String;
    /** Omitting the cursor will start from the beginning */
    cursor: Schema.optional<typeof Schema.Number>;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.PushReq">;
} & {
    requestId: typeof Schema.String;
    batch: Schema.Array$<Schema.Struct<{
        name: typeof Schema.String;
        args: typeof Schema.Any;
        seqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        parentSeqNum: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        clientId: typeof Schema.String;
        sessionId: typeof Schema.String;
    }>>;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.AdminResetRoomReq">;
} & {
    requestId: typeof Schema.String;
    adminSecret: typeof Schema.String;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.AdminInfoReq">;
} & {
    requestId: typeof Schema.String;
    adminSecret: typeof Schema.String;
}>, Schema.Struct<{
    _tag: Schema.tag<"WSMessage.Ping">;
} & {
    requestId: Schema.Literal<["ping"]>;
}>]>;
export type ClientToBackendMessage = typeof ClientToBackendMessage.Type;
//# sourceMappingURL=ws-message-types.d.ts.map