import { State } from '@livestore/common/schema';
import { Effect, Option, Schema } from '@livestore/utils/effect';
import { DurableObject } from 'cloudflare:workers';
import { WSMessage } from '../common/mod.js';
export interface Env {
    DB: D1Database;
    ADMIN_SECRET: string;
}
export declare const eventlogTable: State.SQLite.TableDef<{
    name: "eventlog_${PERSISTENCE_FORMAT_VERSION}_${storeId}";
    columns: {
        readonly seqNum: {
            columnType: "integer";
            schema: Schema.Schema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
            default: Option.None<never>;
            nullable: false;
            primaryKey: true;
        };
        readonly parentSeqNum: {
            columnType: "integer";
            schema: Schema.Schema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
            default: Option.None<never>;
            nullable: false;
            primaryKey: false;
        };
        readonly name: {
            columnType: "text";
            schema: Schema.Schema<string, string, never>;
            default: Option.None<never>;
            nullable: false;
            primaryKey: false;
        };
        readonly args: {
            columnType: "text";
            schema: Schema.Schema<any, string | null, never>;
            default: Option.None<never>;
            nullable: true;
            primaryKey: false;
        };
        readonly createdAt: {
            columnType: "text";
            schema: Schema.Schema<string, string, never>;
            default: Option.None<never>;
            nullable: false;
            primaryKey: false;
        };
        readonly clientId: {
            columnType: "text";
            schema: Schema.Schema<string, string, never>;
            default: Option.None<never>;
            nullable: false;
            primaryKey: false;
        };
        readonly sessionId: {
            columnType: "text";
            schema: Schema.Schema<string, string, never>;
            default: Option.None<never>;
            nullable: false;
            primaryKey: false;
        };
    };
    indexes?: ReadonlyArray<import("@livestore/common/dist/schema/state/sqlite/db-schema/dsl/mod.js").Index>;
    ast: import("@livestore/common/dist/schema/state/sqlite/db-schema/ast/sqlite.js").Table;
}, {
    isClientDocumentTable: false;
    requiredInsertColumnNames: "createdAt" | "name" | "seqNum" | "parentSeqNum" | "clientId" | "sessionId";
}, Schema.Schema<{
    readonly seqNum: number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">;
    readonly parentSeqNum: number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">;
    readonly name: string;
    readonly args: any;
    readonly createdAt: string;
    readonly clientId: string;
    readonly sessionId: string;
}, {
    readonly seqNum: number;
    readonly parentSeqNum: number;
    readonly name: string;
    readonly args: string | null;
    readonly createdAt: string;
    readonly clientId: string;
    readonly sessionId: string;
}, never>>;
export declare const PULL_CHUNK_SIZE = 100;
/**
 * Needs to be bumped when the storage format changes (e.g. eventlogTable schema changes)
 *
 * Changing this version number will lead to a "soft reset".
 */
export declare const PERSISTENCE_FORMAT_VERSION = 7;
export type MakeDurableObjectClassOptions = {
    onPush?: (message: WSMessage.PushReq) => Effect.Effect<void> | Promise<void>;
    onPushRes?: (message: WSMessage.PushAck | WSMessage.Error) => Effect.Effect<void> | Promise<void>;
    onPull?: (message: WSMessage.PullReq) => Effect.Effect<void> | Promise<void>;
    onPullRes?: (message: WSMessage.PullRes | WSMessage.Error) => Effect.Effect<void> | Promise<void>;
};
export type MakeDurableObjectClass = (options?: MakeDurableObjectClassOptions) => {
    new (ctx: DurableObjectState, env: Env): DurableObject<Env>;
};
export declare const makeDurableObject: MakeDurableObjectClass;
//# sourceMappingURL=durable-object.d.ts.map