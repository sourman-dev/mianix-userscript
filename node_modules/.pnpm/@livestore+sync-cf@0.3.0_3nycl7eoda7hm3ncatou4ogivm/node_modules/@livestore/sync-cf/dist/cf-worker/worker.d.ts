import type { Schema } from '@livestore/utils/effect';
import type { Env } from './durable-object.js';
export type CFWorker = {
    fetch: (request: Request, env: Env, ctx: ExecutionContext) => Promise<Response>;
};
export type MakeWorkerOptions = {
    validatePayload?: (payload: Schema.JsonValue | undefined) => void | Promise<void>;
    /** @default false */
    enableCORS?: boolean;
    durableObject?: {
        /**
         * Needs to match the binding name from the wrangler config
         *
         * @default 'WEBSOCKET_SERVER'
         */
        name?: string;
    };
};
export declare const makeWorker: (options?: MakeWorkerOptions) => CFWorker;
/**
 * Handles `/websocket` endpoint.
 *
 * @example
 * ```ts
 * const validatePayload = (payload: Schema.JsonValue | undefined) => {
 *   if (payload?.authToken !== 'insecure-token-change-me') {
 *     throw new Error('Invalid auth token')
 *   }
 * }
 *
 * export default {
 *   fetch: async (request, env, ctx) => {
 *     if (request.url.endsWith('/websocket')) {
 *       return handleWebSocket(request, env, ctx, { headers: {}, validatePayload })
 *     }
 *
 *     return new Response('Invalid path', { status: 400, headers: corsHeaders })
 *   }
 * }
 * ```
 *
 * @throws {UnexpectedError} If the payload is invalid
 */
export declare const handleWebSocket: (request: Request, env: Env, _ctx: ExecutionContext, options: {
    headers?: HeadersInit;
    durableObject?: MakeWorkerOptions["durableObject"];
    validatePayload?: (payload: Schema.JsonValue | undefined) => void | Promise<void>;
}) => Promise<Response>;
//# sourceMappingURL=worker.d.ts.map