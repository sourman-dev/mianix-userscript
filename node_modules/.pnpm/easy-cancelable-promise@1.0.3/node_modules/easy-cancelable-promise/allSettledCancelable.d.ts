import type { TTryCatchPromiseResult } from './types';
import { CancelablePromise } from './CancelablePromise';
/**
 * Execute the list of promises in order and return the result of each promise execution.
 * This method is similar to Promise.allSettled but it allows to cancel the execution of the promises.
 * Also groups the results as an array of TTryCatchPromiseResult<PromiseSettledResult<Awaited<T[P]>>>.
 */
export declare const allSettledCancelable: <T extends [] | readonly unknown[]>(values: T) => CancelablePromise<{ -readonly [P in keyof T]: TTryCatchPromiseResult<PromiseSettledResult<Awaited<T[P]>>, unknown>; }>;
