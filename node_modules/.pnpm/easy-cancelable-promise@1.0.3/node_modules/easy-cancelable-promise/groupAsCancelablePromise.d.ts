import { CancelablePromise } from './CancelablePromise';
export type TCancelablePromiseBuildCallback<T = unknown> = () => Promise<T> | CancelablePromise<T>;
export type TCancelablePromiseGroupConfig = {
    maxConcurrent?: number;
    executeInOrder?: boolean;
    beforeEachCallback?: () => void;
    afterEachCallback?: (result: unknown) => void;
    onQueueEmptyCallback?: (result: unknown[] | null) => void;
};
/**
 * Group the list of elements into a single CancelablePromise.
 * @param {Array<TCancelablePromiseBuildCallback | TCancelablePromise | Promise<unknown>>} sources the list of elements to group
 * @param {Omit<TAsyncQueueConfig, 'executeImmediately'>} [config] the config to apply to the execution of the group
 * @param {number} [config.maxConcurrent=8] the maximum number of elements to execute concurrently
 * @param {boolean} [config.executeInOrder=false] if true, the elements will be executed in order
 * @param {Function} [config.beforeEachcCallback=null] a callback to execute before each element execution
 * @param {Function} [config.afterEachCallback=null] a callback to execute after each element execution successfully, the callback will receive the result of the element execution unknown
 * @param {Function} [config.onQueueEmptyCallback=null] a callback to execute when the queue is empty, the callback will receive the result of the group execution unknown[][]
 * @returns {TCancelablePromise<TResult>} the CancelablePromise
 * @example
 * const promise1 = new CancelablePromise((resolve) => {
 *  setTimeout(() => {
 *    resolve('hello');
 *  }, 1000);
 * });
 *
 * const promise2 = new CancelablePromise((resolve) => {
 *  setTimeout(() => {
 *    resolve('world');
 *  }, 1000);
 * });
 *
 * const cancelablePromise = groupAsCancelablePromise([promise1, promise2]);
 *
 * cancelablePromise.onCancel(() => {
 *  console.log('promise canceled');
 * });
 *
 * cancelablePromise.cancel();
 * // promise canceled
 * */
export declare const groupAsCancelablePromise: <TResult extends unknown[]>(sources: (Promise<unknown> | TCancelablePromiseBuildCallback<unknown> | CancelablePromise<TResult>)[], config?: TCancelablePromiseGroupConfig) => CancelablePromise<TResult>;
