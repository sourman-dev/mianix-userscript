import { type CollectionSchema, type DBInstanceCallback, type AsyncIDBConfig, type IDBTransactionCallback, type OnDBUpgradeCallback, RelationsSchema } from "./types";
import { AsyncIDBStore } from "./idbStore.js";
/**
 * @private
 * Internal usage only. Do not use directly.
 */
export declare class AsyncIDB<T extends CollectionSchema, R extends RelationsSchema> {
    #private;
    private name;
    private config;
    stores: {
        [key in keyof T]: AsyncIDBStore<T[key], R>;
    };
    storeNames: string[];
    onUpgrade?: OnDBUpgradeCallback<T, R>;
    bc: BroadcastChannel;
    relayEnabled?: boolean;
    version: number;
    schema: T;
    relations: R;
    constructor(name: string, config: AsyncIDBConfig<T, R>);
    getInstance(instanceCallback: DBInstanceCallback): void;
    transaction(callback: IDBTransactionCallback<T, R>, options?: IDBTransactionOptions): Promise<any>;
    private init;
    private createStores;
    private cloneStoresForTransaction;
    private initializeStores;
    private createStore;
}
