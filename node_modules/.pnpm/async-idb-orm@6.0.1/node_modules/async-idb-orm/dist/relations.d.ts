import type { AnyCollection, CollectionRecord } from "./types";
export type RelationType = "one-to-one" | "one-to-many";
export type RelationDefinition<From extends AnyCollection, To extends AnyCollection> = {
    type: RelationType;
    from: keyof CollectionRecord<From> & string;
    to: keyof CollectionRecord<To> & string;
};
type RelationsConfig<From extends AnyCollection, To extends AnyCollection> = {
    [key: string]: (fromFields: {
        [key in keyof CollectionRecord<From> & string]: key;
    }, toFields: {
        [key in keyof CollectionRecord<To> & string]: key;
    }) => RelationDefinition<From, To>;
};
export type RelationsDefinitionMap<From extends AnyCollection, To extends AnyCollection> = {
    [key: string]: RelationDefinition<From, To>;
};
export declare class Relations<From extends AnyCollection, To extends AnyCollection, RelationsMap extends RelationsDefinitionMap<From, To> = never> {
    from: From;
    to: To;
    relationsMap: RelationsMap;
    private constructor();
    static create<A extends AnyCollection, B extends AnyCollection>(from: A, to: B): Relations<A, B, never>;
    as<const Config extends RelationsConfig<From, To>>(cfg: Config): Relations<From, To, { [K in keyof Config]: ReturnType<Config[K]>; }>;
}
export {};
