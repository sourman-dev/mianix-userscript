import { prepareBindValues, SqliteError } from '@livestore/common';
import { Effect } from '@livestore/utils/effect';
export const execSql = (sqliteDb, sql, bind) => {
    const bindValues = prepareBindValues(bind, sql);
    return Effect.try({
        try: () => sqliteDb.execute(sql, bindValues),
        catch: (cause) => new SqliteError({ cause, query: { bindValues, sql }, code: cause.code }),
    }).pipe(Effect.asVoid);
};
// const selectSqlPrepared = <T>(stmt: PreparedStatement, bind: BindValues) => {
//   const bindValues = prepareBindValues(bind, stmt.sql)
//   return Effect.try({
//     try: () => stmt.select<T>(bindValues),
//     catch: (cause) =>
//       new SqliteError({ cause, query: { bindValues, sql: stmt.sql }, code: (cause as WaSqlite.SQLiteError).code }),
//   })
// }
// TODO actually use prepared statements
export const execSqlPrepared = (sqliteDb, sql, bindValues) => {
    return Effect.try({
        try: () => sqliteDb.execute(sql, bindValues),
        catch: (cause) => new SqliteError({ cause, query: { bindValues, sql }, code: cause.code }),
    }).pipe(Effect.asVoid);
};
//# sourceMappingURL=connection.js.map