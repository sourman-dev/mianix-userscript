import { Devtools, makeClientSession, UnexpectedError } from '@livestore/common';
import { configureConnection, Eventlog, LeaderThreadCtx, makeLeaderThreadLayer } from '@livestore/common/leader-thread';
import { LiveStoreEvent } from '@livestore/common/schema';
import * as DevtoolsWeb from '@livestore/devtools-web-common/web-channel';
import { sqliteDbFactory } from '@livestore/sqlite-wasm/browser';
import { loadSqlite3Wasm } from '@livestore/sqlite-wasm/load-wasm';
import { tryAsFunctionAndNew } from '@livestore/utils';
import { BrowserWorker, Effect, FetchHttpClient, Fiber, Layer, SubscriptionRef, Worker } from '@livestore/utils/effect';
import { nanoid } from '@livestore/utils/nanoid';
import * as Webmesh from '@livestore/webmesh';
import { connectWebmeshNodeClientSession } from '../web-worker/client-session/client-session-devtools.js';
import { makeShutdownChannel } from '../web-worker/common/shutdown-channel.js';
// NOTE we're starting to initialize the sqlite wasm binary here to speed things up
const sqlite3Promise = loadSqlite3Wasm();
export const makeInMemoryAdapter = (options = {}) => (adapterArgs) => Effect.gen(function* () {
    const { schema, shutdown, syncPayload, storeId, devtoolsEnabled } = adapterArgs;
    const sqlite3 = yield* Effect.promise(() => sqlite3Promise);
    const sqliteDb = yield* sqliteDbFactory({ sqlite3 })({ _tag: 'in-memory' });
    const clientId = options.clientId ?? nanoid(6);
    const sessionId = options.sessionId ?? nanoid(6);
    const sharedWebWorker = options.devtools?.sharedWorker
        ? tryAsFunctionAndNew(options.devtools.sharedWorker, {
            name: `livestore-shared-worker-${storeId}`,
        })
        : undefined;
    const sharedWorkerFiber = sharedWebWorker
        ? yield* Worker.makePoolSerialized({
            size: 1,
            concurrency: 100,
        }).pipe(Effect.provide(BrowserWorker.layer(() => sharedWebWorker)), Effect.tapCauseLogPretty, UnexpectedError.mapToUnexpectedError, Effect.forkScoped)
        : undefined;
    const { leaderThread, initialSnapshot } = yield* makeLeaderThread({
        schema,
        storeId,
        clientId,
        makeSqliteDb: sqliteDbFactory({ sqlite3 }),
        syncOptions: options.sync,
        syncPayload,
        importSnapshot: options.importSnapshot,
        devtoolsEnabled,
        sharedWorkerFiber,
    });
    sqliteDb.import(initialSnapshot);
    const lockStatus = yield* SubscriptionRef.make('has-lock');
    const clientSession = yield* makeClientSession({
        ...adapterArgs,
        sqliteDb,
        clientId,
        sessionId,
        isLeader: true,
        leaderThread,
        lockStatus,
        shutdown,
        webmeshMode: 'direct',
        connectWebmeshNode: ({ sessionInfo, webmeshNode }) => Effect.gen(function* () {
            if (sharedWorkerFiber === undefined || devtoolsEnabled === false) {
                return;
            }
            const sharedWorker = yield* sharedWorkerFiber.pipe(Fiber.join);
            yield* connectWebmeshNodeClientSession({ webmeshNode, sessionInfo, sharedWorker, devtoolsEnabled, schema });
        }),
        registerBeforeUnload: (onBeforeUnload) => {
            if (typeof window !== 'undefined' && typeof window.addEventListener === 'function') {
                window.addEventListener('beforeunload', onBeforeUnload);
                return () => window.removeEventListener('beforeunload', onBeforeUnload);
            }
            return () => { };
        },
    });
    return clientSession;
}).pipe(UnexpectedError.mapToUnexpectedError, Effect.provide(FetchHttpClient.layer));
const makeLeaderThread = ({ schema, storeId, clientId, makeSqliteDb, syncOptions, syncPayload, importSnapshot, devtoolsEnabled, sharedWorkerFiber, }) => Effect.gen(function* () {
    const runtime = yield* Effect.runtime();
    const makeDb = (_kind) => {
        return makeSqliteDb({
            _tag: 'in-memory',
            configureDb: (db) => configureConnection(db, { foreignKeys: true }).pipe(Effect.provide(runtime), Effect.runSync),
        });
    };
    const shutdownChannel = yield* makeShutdownChannel(storeId);
    // Might involve some async work, so we're running them concurrently
    const [dbState, dbEventlog] = yield* Effect.all([makeDb('state'), makeDb('eventlog')], { concurrency: 2 });
    if (importSnapshot) {
        dbState.import(importSnapshot);
    }
    const devtoolsOptions = yield* makeDevtoolsOptions({
        devtoolsEnabled,
        sharedWorkerFiber,
        dbState,
        dbEventlog,
        storeId,
        clientId,
    });
    const layer = yield* Layer.build(makeLeaderThreadLayer({
        schema,
        storeId,
        clientId,
        makeSqliteDb,
        syncOptions,
        dbState,
        dbEventlog,
        devtoolsOptions,
        shutdownChannel,
        syncPayload,
    }));
    return yield* Effect.gen(function* () {
        const { dbState, dbEventlog, syncProcessor, extraIncomingMessagesQueue, initialState } = yield* LeaderThreadCtx;
        const initialLeaderHead = Eventlog.getClientHeadFromDb(dbEventlog);
        const leaderThread = {
            events: {
                pull: ({ cursor }) => syncProcessor.pull({ cursor }),
                push: (batch) => syncProcessor.push(batch.map((item) => new LiveStoreEvent.EncodedWithMeta(item)), { waitForProcessing: true }),
            },
            initialState: { leaderHead: initialLeaderHead, migrationsReport: initialState.migrationsReport },
            export: Effect.sync(() => dbState.export()),
            getEventlogData: Effect.sync(() => dbEventlog.export()),
            getSyncState: syncProcessor.syncState,
            sendDevtoolsMessage: (message) => extraIncomingMessagesQueue.offer(message),
        };
        const initialSnapshot = dbState.export();
        return { leaderThread, initialSnapshot };
    }).pipe(Effect.provide(layer));
});
const makeDevtoolsOptions = ({ devtoolsEnabled, sharedWorkerFiber, dbState, dbEventlog, storeId, clientId, }) => Effect.gen(function* () {
    if (devtoolsEnabled === false || sharedWorkerFiber === undefined) {
        return { enabled: false };
    }
    return {
        enabled: true,
        boot: Effect.gen(function* () {
            const persistenceInfo = {
                state: dbState.metadata.persistenceInfo,
                eventlog: dbEventlog.metadata.persistenceInfo,
            };
            const node = yield* Webmesh.makeMeshNode(Devtools.makeNodeName.client.leader({ storeId, clientId }));
            // @ts-expect-error TODO type this
            globalThis.__debugWebmeshNodeLeader = node;
            const sharedWorker = yield* sharedWorkerFiber.pipe(Fiber.join);
            // TODO also make this work with the browser extension
            // basic idea: instead of also connecting to the shared worker,
            // connect to the client session node above which will already connect to the shared worker + browser extension
            yield* DevtoolsWeb.connectViaWorker({
                node,
                worker: sharedWorker,
                target: DevtoolsWeb.makeNodeName.sharedWorker({ storeId }),
            }).pipe(Effect.tapCauseLogPretty, Effect.forkScoped);
            return { node, persistenceInfo, mode: 'direct' };
        }),
    };
});
//# sourceMappingURL=in-memory-adapter.js.map