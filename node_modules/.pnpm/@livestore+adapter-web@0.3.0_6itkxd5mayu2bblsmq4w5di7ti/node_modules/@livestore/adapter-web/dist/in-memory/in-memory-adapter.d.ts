import type { Adapter, SyncOptions } from '@livestore/common';
import { UnexpectedError } from '@livestore/common';
import type { LiveStoreSchema } from '@livestore/common/schema';
import type * as WebmeshWorker from '@livestore/devtools-web-common/worker';
import type { MakeWebSqliteDb } from '@livestore/sqlite-wasm/browser';
import type { Schema } from '@livestore/utils/effect';
import { Fiber, Worker } from '@livestore/utils/effect';
export interface InMemoryAdapterOptions {
    importSnapshot?: Uint8Array;
    sync?: SyncOptions;
    /**
     * The client ID to use for the adapter.
     *
     * @default a random nanoid
     */
    clientId?: string;
    /**
     * The session ID to use for the adapter.
     *
     * @default a random nanoid
     */
    sessionId?: string;
    /** In order to use the devtools with the in-memory adapter, you need to provide the shared worker. */
    devtools?: {
        sharedWorker: ((options: {
            name: string;
        }) => globalThis.SharedWorker) | (new (options: {
            name: string;
        }) => globalThis.SharedWorker);
    };
}
export declare const makeInMemoryAdapter: (options?: InMemoryAdapterOptions) => Adapter;
export interface MakeLeaderThreadArgs {
    schema: LiveStoreSchema;
    storeId: string;
    clientId: string;
    makeSqliteDb: MakeWebSqliteDb;
    syncOptions: SyncOptions | undefined;
    syncPayload: Schema.JsonValue | undefined;
    importSnapshot: Uint8Array | undefined;
    devtoolsEnabled: boolean;
    sharedWorkerFiber: SharedWorkerFiber | undefined;
}
type SharedWorkerFiber = Fiber.Fiber<Worker.SerializedWorkerPool<typeof WebmeshWorker.Schema.Request.Type>, UnexpectedError>;
export {};
//# sourceMappingURL=in-memory-adapter.d.ts.map