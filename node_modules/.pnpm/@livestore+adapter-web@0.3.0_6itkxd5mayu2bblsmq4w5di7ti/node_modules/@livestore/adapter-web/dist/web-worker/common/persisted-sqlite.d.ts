import { UnexpectedError } from '@livestore/common';
import type { LiveStoreSchema } from '@livestore/common/schema';
import { Effect, Schema } from '@livestore/utils/effect';
import type * as WorkerSchema from './worker-schema.js';
declare const PersistedSqliteError_base: Schema.TaggedErrorClass<PersistedSqliteError, "PersistedSqliteError", {
    readonly _tag: Schema.tag<"PersistedSqliteError">;
} & {
    cause: typeof Schema.Defect;
}>;
export declare class PersistedSqliteError extends PersistedSqliteError_base {
}
export declare const readPersistedAppDbFromClientSession: ({ storageOptions, storeId, schema, }: {
    storageOptions: WorkerSchema.StorageType;
    storeId: string;
    schema: LiveStoreSchema;
}) => Effect.Effect<Uint8Array<ArrayBuffer> | undefined, never, never>;
export declare const resetPersistedDataFromClientSession: ({ storageOptions, storeId, }: {
    storageOptions: WorkerSchema.StorageType;
    storeId: string;
}) => Effect.Effect<void, UnexpectedError, never>;
export declare const sanitizeOpfsDir: (directory: string | undefined, storeId: string) => string;
export declare const getStateDbFileName: (schema: LiveStoreSchema) => string;
export {};
//# sourceMappingURL=persisted-sqlite.d.ts.map