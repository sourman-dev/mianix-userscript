import { Devtools, UnexpectedError } from '@livestore/common';
import { configureConnection, Eventlog, LeaderThreadCtx, makeLeaderThreadLayer } from '@livestore/common/leader-thread';
import { LiveStoreEvent } from '@livestore/common/schema';
import * as WebmeshWorker from '@livestore/devtools-web-common/worker';
import { sqliteDbFactory } from '@livestore/sqlite-wasm/browser';
import { loadSqlite3Wasm } from '@livestore/sqlite-wasm/load-wasm';
import { isDevEnv, LS_DEV } from '@livestore/utils';
import { BrowserWorkerRunner, Effect, FetchHttpClient, identity, Layer, Logger, LogLevel, OtelTracer, Scheduler, Stream, TaskTracing, WorkerRunner, } from '@livestore/utils/effect';
import * as OpfsUtils from '../../opfs-utils.js';
import { getStateDbFileName, sanitizeOpfsDir } from '../common/persisted-sqlite.js';
import { makeShutdownChannel } from '../common/shutdown-channel.js';
import * as WorkerSchema from '../common/worker-schema.js';
if (isDevEnv()) {
    globalThis.__debugLiveStoreUtils = {
        opfs: OpfsUtils,
        blobUrl: (buffer) => URL.createObjectURL(new Blob([buffer], { type: 'application/octet-stream' })),
        runSync: (effect) => Effect.runSync(effect),
        runFork: (effect) => Effect.runFork(effect),
    };
}
export const makeWorker = (options) => {
    makeWorkerEffect(options).pipe(Effect.runFork);
};
export const makeWorkerEffect = (options) => {
    const TracingLive = options.otelOptions?.tracer
        ? Layer.unwrapEffect(Effect.map(OtelTracer.make, Layer.setTracer)).pipe(Layer.provideMerge(Layer.succeed(OtelTracer.OtelTracer, options.otelOptions.tracer)))
        : undefined;
    return makeWorkerRunnerOuter(options).pipe(Layer.provide(BrowserWorkerRunner.layer), WorkerRunner.launch, Effect.scoped, Effect.tapCauseLogPretty, Effect.annotateLogs({ thread: self.name }), Effect.provide(Logger.prettyWithThread(self.name)), Effect.provide(FetchHttpClient.layer), LS_DEV ? TaskTracing.withAsyncTaggingTracing((name) => console.createTask(name)) : identity, TracingLive ? Effect.provide(TracingLive) : identity, 
    // We're using this custom scheduler to improve op batching behaviour and reduce the overhead
    // of the Effect fiber runtime given we have different tradeoffs on a worker thread.
    // Despite the "message channel" name, is has nothing to do with the `incomingRequestsPort` above.
    Effect.withScheduler(Scheduler.messageChannel()), 
    // We're increasing the Effect ops limit here to allow for larger chunks of operations at a time
    Effect.withMaxOpsBeforeYield(4096), Logger.withMinimumLogLevel(LogLevel.Debug));
};
const makeWorkerRunnerOuter = (workerOptions) => WorkerRunner.layerSerialized(WorkerSchema.LeaderWorkerOuter.InitialMessage, {
    // Port coming from client session and forwarded via the shared worker
    InitialMessage: ({ port: incomingRequestsPort, storeId, clientId }) => Effect.gen(function* () {
        yield* makeWorkerRunnerInner(workerOptions).pipe(Layer.provide(BrowserWorkerRunner.layerMessagePort(incomingRequestsPort)), WorkerRunner.launch, Effect.scoped, Effect.withSpan('@livestore/adapter-web:worker:wrapper:InitialMessage:innerFiber'), Effect.tapCauseLogPretty, Effect.provide(WebmeshWorker.CacheService.layer({ nodeName: Devtools.makeNodeName.client.leader({ storeId, clientId }) })), Effect.forkScoped);
        return Layer.empty;
    }).pipe(Effect.withSpan('@livestore/adapter-web:worker:wrapper:InitialMessage'), Layer.unwrapScoped),
});
const makeWorkerRunnerInner = ({ schema, sync: syncOptions }) => WorkerRunner.layerSerialized(WorkerSchema.LeaderWorkerInner.Request, {
    InitialMessage: ({ storageOptions, storeId, clientId, devtoolsEnabled, debugInstanceId, syncPayload }) => Effect.gen(function* () {
        const sqlite3 = yield* Effect.promise(() => loadSqlite3Wasm());
        const makeSqliteDb = sqliteDbFactory({ sqlite3 });
        const runtime = yield* Effect.runtime();
        const makeDb = (kind) => makeSqliteDb({
            _tag: 'opfs',
            opfsDirectory: sanitizeOpfsDir(storageOptions.directory, storeId),
            fileName: kind === 'state' ? getStateDbFileName(schema) : 'eventlog.db',
            configureDb: (db) => configureConnection(db, {
                //  The persisted databases use the AccessHandlePoolVFS which always uses a single database connection.
                //  Multiple connections are not supported. This means that we can use the exclusive locking mode to
                //  avoid unnecessary system calls and enable the use of the WAL journal mode without the use of shared memory.
                // TODO bring back exclusive locking mode when `WAL` is working properly
                // lockingMode: 'EXCLUSIVE',
                foreignKeys: true,
            }).pipe(Effect.provide(runtime), Effect.runSync),
        }).pipe(Effect.acquireRelease((db) => Effect.try(() => db.close()).pipe(Effect.ignoreLogged)));
        // Might involve some async work, so we're running them concurrently
        const [dbState, dbEventlog] = yield* Effect.all([makeDb('state'), makeDb('eventlog')], {
            concurrency: 2,
        });
        const devtoolsOptions = yield* makeDevtoolsOptions({ devtoolsEnabled, dbState, dbEventlog });
        const shutdownChannel = yield* makeShutdownChannel(storeId);
        return makeLeaderThreadLayer({
            schema,
            storeId,
            clientId,
            makeSqliteDb,
            syncOptions,
            dbState,
            dbEventlog,
            devtoolsOptions,
            shutdownChannel,
            syncPayload,
        });
    }).pipe(Effect.tapCauseLogPretty, UnexpectedError.mapToUnexpectedError, Effect.withPerformanceMeasure('@livestore/adapter-web:worker:InitialMessage'), Effect.withSpan('@livestore/adapter-web:worker:InitialMessage'), Effect.annotateSpans({ debugInstanceId }), Layer.unwrapScoped),
    GetRecreateSnapshot: () => Effect.gen(function* () {
        const workerCtx = yield* LeaderThreadCtx;
        // NOTE we can only return the cached snapshot once as it's transferred (i.e. disposed), so we need to set it to undefined
        // const cachedSnapshot =
        //   result._tag === 'Recreate' ? yield* Ref.getAndSet(result.snapshotRef, undefined) : undefined
        // return cachedSnapshot ?? workerCtx.db.export()
        const snapshot = workerCtx.dbState.export();
        return { snapshot, migrationsReport: workerCtx.initialState.migrationsReport };
    }).pipe(UnexpectedError.mapToUnexpectedError, Effect.withSpan('@livestore/adapter-web:worker:GetRecreateSnapshot')),
    PullStream: ({ cursor }) => Effect.gen(function* () {
        const { syncProcessor } = yield* LeaderThreadCtx;
        return syncProcessor.pull({ cursor });
    }).pipe(Stream.unwrapScoped),
    PushToLeader: ({ batch }) => Effect.andThen(LeaderThreadCtx, ({ syncProcessor }) => syncProcessor.push(batch.map((event) => new LiveStoreEvent.EncodedWithMeta(event)), 
    // We'll wait in order to keep back pressure on the client session
    { waitForProcessing: true })).pipe(Effect.uninterruptible, Effect.withSpan('@livestore/adapter-web:worker:PushToLeader')),
    Export: () => Effect.andThen(LeaderThreadCtx, (_) => _.dbState.export()).pipe(UnexpectedError.mapToUnexpectedError, Effect.withSpan('@livestore/adapter-web:worker:Export')),
    ExportEventlog: () => Effect.andThen(LeaderThreadCtx, (_) => _.dbEventlog.export()).pipe(UnexpectedError.mapToUnexpectedError, Effect.withSpan('@livestore/adapter-web:worker:ExportEventlog')),
    BootStatusStream: () => Effect.andThen(LeaderThreadCtx, (_) => Stream.fromQueue(_.bootStatusQueue)).pipe(Stream.unwrap),
    GetLeaderHead: () => Effect.gen(function* () {
        const workerCtx = yield* LeaderThreadCtx;
        return Eventlog.getClientHeadFromDb(workerCtx.dbEventlog);
    }).pipe(UnexpectedError.mapToUnexpectedError, Effect.withSpan('@livestore/adapter-web:worker:GetLeaderHead')),
    GetLeaderSyncState: () => Effect.gen(function* () {
        const workerCtx = yield* LeaderThreadCtx;
        return yield* workerCtx.syncProcessor.syncState;
    }).pipe(UnexpectedError.mapToUnexpectedError, Effect.withSpan('@livestore/adapter-web:worker:GetLeaderSyncState')),
    Shutdown: () => Effect.gen(function* () {
        yield* Effect.logDebug('[@livestore/adapter-web:worker] Shutdown');
        // Buy some time for Otel to flush
        // TODO find a cleaner way to do this
        yield* Effect.sleep(300);
    }).pipe(UnexpectedError.mapToUnexpectedError, Effect.withSpan('@livestore/adapter-web:worker:Shutdown')),
    ExtraDevtoolsMessage: ({ message }) => Effect.andThen(LeaderThreadCtx, (_) => _.extraIncomingMessagesQueue.offer(message)).pipe(UnexpectedError.mapToUnexpectedError, Effect.withSpan('@livestore/adapter-web:worker:ExtraDevtoolsMessage')),
    'DevtoolsWebCommon.CreateConnection': WebmeshWorker.CreateConnection,
});
const makeDevtoolsOptions = ({ devtoolsEnabled, dbState, dbEventlog, }) => Effect.gen(function* () {
    if (devtoolsEnabled === false) {
        return { enabled: false };
    }
    const { node } = yield* WebmeshWorker.CacheService;
    return {
        enabled: true,
        boot: Effect.gen(function* () {
            const persistenceInfo = {
                state: dbState.metadata.persistenceInfo,
                eventlog: dbEventlog.metadata.persistenceInfo,
            };
            return { node, persistenceInfo, mode: 'direct' };
        }),
    };
});
//# sourceMappingURL=make-leader-worker.js.map