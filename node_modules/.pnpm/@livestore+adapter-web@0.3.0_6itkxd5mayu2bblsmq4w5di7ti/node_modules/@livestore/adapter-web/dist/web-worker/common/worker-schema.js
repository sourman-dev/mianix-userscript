import { BootStatus, Devtools, LeaderAheadError, LeaderPullCursor, liveStoreVersion, MigrationsReport, SyncState, UnexpectedError, } from '@livestore/common';
import { EventSequenceNumber, LiveStoreEvent } from '@livestore/common/schema';
import * as WebmeshWorker from '@livestore/devtools-web-common/worker';
import { Schema, Transferable } from '@livestore/utils/effect';
export const StorageTypeOpfs = Schema.Struct({
    type: Schema.Literal('opfs'),
    /**
     * Default is `livestore-${storeId}`
     *
     * When providing this option, make sure to include the `storeId` in the path to avoid
     * conflicts with other LiveStore apps.
     */
    directory: Schema.optional(Schema.String),
});
// export const StorageTypeIndexeddb = Schema.Struct({
//   type: Schema.Literal('indexeddb'),
//   /** @default "livestore" */
//   databaseName: Schema.optionalWith(Schema.String, { default: () => 'livestore' }),
//   /** @default "livestore-" */
//   storeNamePrefix: Schema.optionalWith(Schema.String, { default: () => 'livestore-' }),
// })
export const StorageType = Schema.Union(StorageTypeOpfs);
// export const SyncBackendOptions = Schema.Union(SyncBackendOptionsWebsocket)
export const SyncBackendOptions = Schema.Record({ key: Schema.String, value: Schema.JsonValue });
export var LeaderWorkerOuter;
(function (LeaderWorkerOuter) {
    class InitialMessage extends Schema.TaggedRequest()('InitialMessage', {
        payload: { port: Transferable.MessagePort, storeId: Schema.String, clientId: Schema.String },
        success: Schema.Void,
        failure: UnexpectedError,
    }) {
    }
    LeaderWorkerOuter.InitialMessage = InitialMessage;
    class Request extends Schema.Union(InitialMessage) {
    }
    LeaderWorkerOuter.Request = Request;
})(LeaderWorkerOuter || (LeaderWorkerOuter = {}));
// TODO unify this code with schema from node adapter
export var LeaderWorkerInner;
(function (LeaderWorkerInner) {
    class InitialMessage extends Schema.TaggedRequest()('InitialMessage', {
        payload: {
            storageOptions: StorageType,
            devtoolsEnabled: Schema.Boolean,
            storeId: Schema.String,
            clientId: Schema.String,
            debugInstanceId: Schema.String,
            syncPayload: Schema.UndefinedOr(Schema.JsonValue),
        },
        success: Schema.Void,
        failure: UnexpectedError,
    }) {
    }
    LeaderWorkerInner.InitialMessage = InitialMessage;
    class BootStatusStream extends Schema.TaggedRequest()('BootStatusStream', {
        payload: {},
        success: BootStatus,
        failure: UnexpectedError,
    }) {
    }
    LeaderWorkerInner.BootStatusStream = BootStatusStream;
    class PushToLeader extends Schema.TaggedRequest()('PushToLeader', {
        payload: {
            batch: Schema.Array(LiveStoreEvent.AnyEncoded),
        },
        success: Schema.Void,
        failure: Schema.Union(UnexpectedError, LeaderAheadError),
    }) {
    }
    LeaderWorkerInner.PushToLeader = PushToLeader;
    class PullStream extends Schema.TaggedRequest()('PullStream', {
        payload: {
            cursor: LeaderPullCursor,
        },
        success: Schema.Struct({
            payload: SyncState.PayloadUpstream,
            mergeCounter: Schema.Number,
        }),
        failure: UnexpectedError,
    }) {
    }
    LeaderWorkerInner.PullStream = PullStream;
    class Export extends Schema.TaggedRequest()('Export', {
        payload: {},
        success: Transferable.Uint8Array,
        failure: UnexpectedError,
    }) {
    }
    LeaderWorkerInner.Export = Export;
    class ExportEventlog extends Schema.TaggedRequest()('ExportEventlog', {
        payload: {},
        success: Transferable.Uint8Array,
        failure: UnexpectedError,
    }) {
    }
    LeaderWorkerInner.ExportEventlog = ExportEventlog;
    class GetRecreateSnapshot extends Schema.TaggedRequest()('GetRecreateSnapshot', {
        payload: {},
        success: Schema.Struct({
            snapshot: Transferable.Uint8Array,
            migrationsReport: MigrationsReport,
        }),
        failure: UnexpectedError,
    }) {
    }
    LeaderWorkerInner.GetRecreateSnapshot = GetRecreateSnapshot;
    class GetLeaderHead extends Schema.TaggedRequest()('GetLeaderHead', {
        payload: {},
        success: EventSequenceNumber.EventSequenceNumber,
        failure: UnexpectedError,
    }) {
    }
    LeaderWorkerInner.GetLeaderHead = GetLeaderHead;
    class GetLeaderSyncState extends Schema.TaggedRequest()('GetLeaderSyncState', {
        payload: {},
        success: SyncState.SyncState,
        failure: UnexpectedError,
    }) {
    }
    LeaderWorkerInner.GetLeaderSyncState = GetLeaderSyncState;
    class Shutdown extends Schema.TaggedRequest()('Shutdown', {
        payload: {},
        success: Schema.Void,
        failure: UnexpectedError,
    }) {
    }
    LeaderWorkerInner.Shutdown = Shutdown;
    class ExtraDevtoolsMessage extends Schema.TaggedRequest()('ExtraDevtoolsMessage', {
        payload: {
            message: Devtools.Leader.MessageToApp,
        },
        success: Schema.Void,
        failure: UnexpectedError,
    }) {
    }
    LeaderWorkerInner.ExtraDevtoolsMessage = ExtraDevtoolsMessage;
    LeaderWorkerInner.Request = Schema.Union(InitialMessage, BootStatusStream, PushToLeader, PullStream, Export, ExportEventlog, GetRecreateSnapshot, GetLeaderHead, GetLeaderSyncState, Shutdown, ExtraDevtoolsMessage, WebmeshWorker.Schema.CreateConnection);
})(LeaderWorkerInner || (LeaderWorkerInner = {}));
export var SharedWorker;
(function (SharedWorker) {
    class InitialMessagePayloadFromClientSession extends Schema.TaggedStruct('FromClientSession', {
        initialMessage: LeaderWorkerInner.InitialMessage,
    }) {
    }
    SharedWorker.InitialMessagePayloadFromClientSession = InitialMessagePayloadFromClientSession;
    class InitialMessage extends Schema.TaggedRequest()('InitialMessage', {
        payload: {
            payload: Schema.Union(InitialMessagePayloadFromClientSession, Schema.TaggedStruct('FromWebBridge', {})),
            // To guard against scenarios where a client session is already running a newer version of LiveStore
            // We should probably find a better way to handle those cases once they become more common.
            liveStoreVersion: Schema.Literal(liveStoreVersion),
        },
        success: Schema.Void,
        failure: UnexpectedError,
    }) {
    }
    SharedWorker.InitialMessage = InitialMessage;
    class UpdateMessagePort extends Schema.TaggedRequest()('UpdateMessagePort', {
        payload: {
            port: Transferable.MessagePort,
        },
        success: Schema.Void,
        failure: UnexpectedError,
    }) {
    }
    SharedWorker.UpdateMessagePort = UpdateMessagePort;
    class Request extends Schema.Union(InitialMessage, UpdateMessagePort, 
    // Proxied requests
    LeaderWorkerInner.BootStatusStream, LeaderWorkerInner.PushToLeader, LeaderWorkerInner.PullStream, LeaderWorkerInner.Export, LeaderWorkerInner.GetRecreateSnapshot, LeaderWorkerInner.ExportEventlog, LeaderWorkerInner.GetLeaderHead, LeaderWorkerInner.GetLeaderSyncState, LeaderWorkerInner.Shutdown, LeaderWorkerInner.ExtraDevtoolsMessage, WebmeshWorker.Schema.CreateConnection) {
    }
    SharedWorker.Request = Request;
})(SharedWorker || (SharedWorker = {}));
//# sourceMappingURL=worker-schema.js.map