import createIndexProvider from "./index6.mjs";
import get from "./index24.mjs";
import getMatchingKeys from "./index28.mjs";
import serializeValue from "./index20.mjs";
function createExternalIndex(field, index) {
  return createIndexProvider({
    query(selector) {
      if (!Object.hasOwnProperty.call(selector, field)) {
        return { matched: false };
      }
      const fieldSelector = selector[field];
      const filteresForNull = fieldSelector == null || fieldSelector.$exists === false;
      const keys = filteresForNull ? { include: null, exclude: [...index.keys()].filter((key) => key != null) } : getMatchingKeys(field, selector);
      if (keys.include == null && keys.exclude == null)
        return { matched: false };
      let includedPositions = [];
      if (keys.include == null) {
        for (const set of index.values()) {
          for (const pos of set) {
            includedPositions.push(pos);
          }
        }
      } else {
        for (const key of keys.include) {
          const posSet = index.get(key);
          if (posSet) {
            for (const pos of posSet) {
              includedPositions.push(pos);
            }
          }
        }
      }
      if (keys.exclude != null) {
        const excludeSet = /* @__PURE__ */ new Set();
        for (const key of keys.exclude) {
          const posSet = index.get(key);
          if (posSet) {
            for (const pos of posSet) {
              excludeSet.add(pos);
            }
          }
        }
        includedPositions = includedPositions.filter((pos) => !excludeSet.has(pos));
      }
      return {
        matched: true,
        positions: includedPositions,
        fields: [field],
        keepSelector: filteresForNull
      };
    },
    rebuild() {
    }
  });
}
function createIndex(field) {
  const index = /* @__PURE__ */ new Map();
  return {
    ...createExternalIndex(field, index),
    rebuild(items) {
      index.clear();
      items.forEach((item, i) => {
        const value = serializeValue(get(item, field));
        const current = index.get(value) || /* @__PURE__ */ new Set();
        current.add(i);
        index.set(value, current);
      });
    }
  };
}
export {
  createExternalIndex,
  createIndex as default
};
