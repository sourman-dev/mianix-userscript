import type { PaginationLayout } from './types';
interface IPaginationProps {
    modelValue?: number;
    totalPages?: number;
    perPage?: number;
    totalItems?: number;
    layout?: PaginationLayout;
    showIcons?: boolean;
    sliceLength?: number;
    previousLabel?: string;
    nextLabel?: string;
    firstLabel?: string;
    lastLabel?: string;
    enableFirstLast?: boolean;
    hideLabels?: boolean;
    large?: boolean;
}
type __VLS_Slots = {
    'start': any;
    'first-icon': any;
    'first-button': any;
    'prev-icon': any;
    'prev-button': any;
    'page-button': any;
    'next-button': any;
    'next-icon': any;
    'last-button': any;
    'last-icon': any;
    'end': any;
};
declare const __VLS_component: import("vue").DefineComponent<IPaginationProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:model-value": (page: number) => any;
    "page-changed": (page: number) => any;
}, string, import("vue").PublicProps, Readonly<IPaginationProps> & Readonly<{
    "onUpdate:model-value"?: ((page: number) => any) | undefined;
    "onPage-changed"?: ((page: number) => any) | undefined;
}>, {
    modelValue: number;
    totalPages: number;
    perPage: number;
    totalItems: number;
    layout: PaginationLayout;
    showIcons: boolean;
    sliceLength: number;
    previousLabel: string;
    nextLabel: string;
    firstLabel: string;
    lastLabel: string;
    enableFirstLast: boolean;
    hideLabels: boolean;
    large: boolean;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
