import { type PropType } from 'vue';
import type { FlowbiteTheme, ThemableChildrenApply } from '../../../components/utils/FlowbiteThemable/types';
import { simplifyTailwindClasses } from '../../../utils/simplifyTailwindClasses';
declare const classes: import("vue").Ref<string, string>;
declare const classAttr: import("vue").ComputedRef<string>;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_6: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    default?: (props: typeof __VLS_6) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    apply: {
        type: PropType<ThemableChildrenApply[]>;
        required: true;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    theme: {
        type: PropType<FlowbiteTheme>;
        default: undefined;
    };
}>, {
    simplifyTailwindClasses: typeof simplifyTailwindClasses;
    classes: typeof classes;
    classAttr: typeof classAttr;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    apply: {
        type: PropType<ThemableChildrenApply[]>;
        required: true;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    theme: {
        type: PropType<FlowbiteTheme>;
        default: undefined;
    };
}>> & Readonly<{}>, {
    tag: string;
    theme: FlowbiteTheme;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<import("vue").ExtractPropTypes<{
    apply: {
        type: PropType<ThemableChildrenApply[]>;
        required: true;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    theme: {
        type: PropType<FlowbiteTheme>;
        default: undefined;
    };
}>, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<import("vue").ExtractPropTypes<{
    apply: {
        type: PropType<ThemableChildrenApply[]>;
        required: true;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
    theme: {
        type: PropType<FlowbiteTheme>;
        default: undefined;
    };
}>> & Readonly<{}>, {
    tag: string;
    theme: FlowbiteTheme;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, true, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
