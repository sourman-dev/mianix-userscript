import type { RatingSize } from './types';
interface IRatingProps {
    rating?: number;
    reviewLink?: string;
    reviewText?: string;
    scale?: number;
    size?: RatingSize;
}
declare const validStarNumber: import("vue").ComputedRef<number>;
declare const invalidStarNumber: import("vue").ComputedRef<number>;
declare const sizeClasses: import("vue").Ref<string, string>;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_1: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    besideText?: (props: typeof __VLS_1) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<IRatingProps, {
    validStarNumber: typeof validStarNumber;
    invalidStarNumber: typeof invalidStarNumber;
    sizeClasses: typeof sizeClasses;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<IRatingProps> & Readonly<{}>, {
    size: RatingSize;
    rating: number;
    reviewLink: string;
    reviewText: string;
    scale: number;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<IRatingProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<IRatingProps> & Readonly<{}>, {
    size: RatingSize;
    rating: number;
    reviewLink: string;
    reviewText: string;
    scale: number;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
