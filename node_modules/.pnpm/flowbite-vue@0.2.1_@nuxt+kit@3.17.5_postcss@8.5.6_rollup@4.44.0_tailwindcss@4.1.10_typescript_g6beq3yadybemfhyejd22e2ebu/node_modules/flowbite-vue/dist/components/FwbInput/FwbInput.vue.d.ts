import type { CommonAutoFill, InputSize, InputType, ValidationStatus } from './types';
interface InputProps {
    autocomplete?: CommonAutoFill;
    class?: string | Record<string, boolean>;
    disabled?: boolean;
    inputClass?: string | Record<string, boolean>;
    label?: string;
    labelClass?: string | Record<string, boolean>;
    modelValue?: string | number;
    required?: boolean;
    size?: InputSize;
    type?: InputType;
    validationStatus?: ValidationStatus;
    wrapperClass?: string | Record<string, boolean>;
}
type __VLS_Props = InputProps;
declare const model: import("vue").ModelRef<string | undefined, string, string | undefined, string | undefined>;
declare const wrapperClass: import("vue").Ref<string, string>, helperMessageClass: import("vue").Ref<string, string>, validationMessageClass: import("vue").Ref<string, string>, labelClass: import("vue").Ref<string, string>, inputWrapperClass: import("vue").Ref<string, string>, inputClass: import("vue").Ref<string, string>;
type __VLS_PublicProps = __VLS_Props & {
    modelValue?: typeof model['value'];
};
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_1: {}, __VLS_3: {}, __VLS_5: {}, __VLS_7: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    prefix?: (props: typeof __VLS_1) => any;
} & {
    suffix?: (props: typeof __VLS_3) => any;
} & {
    validationMessage?: (props: typeof __VLS_5) => any;
} & {
    helper?: (props: typeof __VLS_7) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<__VLS_PublicProps, {
    model: typeof model;
    wrapperClass: typeof wrapperClass;
    helperMessageClass: typeof helperMessageClass;
    validationMessageClass: typeof validationMessageClass;
    labelClass: typeof labelClass;
    inputWrapperClass: typeof inputWrapperClass;
    inputClass: typeof inputClass;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: string | undefined) => any;
}, string, import("vue").PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:modelValue"?: ((value: string | undefined) => any) | undefined;
}>, {
    label: string;
    class: string | Record<string, boolean>;
    type: InputType;
    size: InputSize;
    disabled: boolean;
    required: boolean;
    modelValue: string;
    labelClass: string | Record<string, boolean>;
    wrapperClass: string | Record<string, boolean>;
    autocomplete: CommonAutoFill;
    inputClass: string | Record<string, boolean>;
    validationStatus: ValidationStatus;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: string | undefined) => any;
}, string, import("vue").PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:modelValue"?: ((value: string | undefined) => any) | undefined;
}>, {
    label: string;
    class: string | Record<string, boolean>;
    type: InputType;
    size: InputSize;
    disabled: boolean;
    required: boolean;
    modelValue: string;
    labelClass: string | Record<string, boolean>;
    wrapperClass: string | Record<string, boolean>;
    autocomplete: CommonAutoFill;
    inputClass: string | Record<string, boolean>;
    validationStatus: ValidationStatus;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
