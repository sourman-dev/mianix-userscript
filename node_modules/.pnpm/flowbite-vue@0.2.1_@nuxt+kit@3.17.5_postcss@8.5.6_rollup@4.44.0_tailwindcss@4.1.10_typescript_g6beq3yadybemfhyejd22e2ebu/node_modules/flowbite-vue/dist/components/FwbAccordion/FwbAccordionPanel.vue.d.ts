import { type Ref } from 'vue';
import type { AccordionPanelProps } from '../../components/FwbAccordion/types';
declare const panelRef: Ref<HTMLDivElement | undefined, HTMLDivElement | undefined>;
declare const panelId: string;
declare const accordionId: Ref<any, any>;
declare const accordionPanelClasses: import("vue").ComputedRef<string>;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_1: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    default?: (props: typeof __VLS_1) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<AccordionPanelProps, {
    panelRef: typeof panelRef;
    panelId: typeof panelId;
    accordionId: typeof accordionId;
    accordionPanelClasses: typeof accordionPanelClasses;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    show: () => any;
    hide: () => any;
}, string, import("vue").PublicProps, Readonly<AccordionPanelProps> & Readonly<{
    onShow?: (() => any) | undefined;
    onHide?: (() => any) | undefined;
}>, {
    activeClass: string | object;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<AccordionPanelProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    show: () => any;
    hide: () => any;
}, string, import("vue").PublicProps, Readonly<AccordionPanelProps> & Readonly<{
    onShow?: (() => any) | undefined;
    onHide?: (() => any) | undefined;
}>, {
    activeClass: string | object;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
