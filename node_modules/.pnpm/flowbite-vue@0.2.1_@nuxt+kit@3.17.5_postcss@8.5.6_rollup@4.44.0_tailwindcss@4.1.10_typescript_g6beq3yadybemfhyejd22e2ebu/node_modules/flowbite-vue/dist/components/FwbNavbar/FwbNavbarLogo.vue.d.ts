interface IFwbNavbarLogoProps {
    link?: string;
    imageUrl?: string;
    alt?: string;
    component?: string;
    linkAttr?: string;
}
declare const componentName: import("vue").ComputedRef<string | import("vue").ConcreteComponent<{}, any, any, import("vue").ComputedOptions, import("vue").MethodOptions, {}, any>>;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_6: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    default?: (props: typeof __VLS_6) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<IFwbNavbarLogoProps, {
    componentName: typeof componentName;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<IFwbNavbarLogoProps> & Readonly<{}>, {
    link: string;
    alt: string;
    linkAttr: string;
    component: string;
    imageUrl: string;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<IFwbNavbarLogoProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<IFwbNavbarLogoProps> & Readonly<{}>, {
    link: string;
    alt: string;
    linkAttr: string;
    component: string;
    imageUrl: string;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
