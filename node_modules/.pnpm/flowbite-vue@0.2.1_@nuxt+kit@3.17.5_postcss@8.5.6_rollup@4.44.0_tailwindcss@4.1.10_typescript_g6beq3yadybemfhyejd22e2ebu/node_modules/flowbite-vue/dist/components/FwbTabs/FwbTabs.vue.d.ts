import FwbTabPane from './FwbTabPane.vue';
import type { TabsVariant } from './types';
interface ITabsProps {
    variant?: TabsVariant;
    modelValue?: string;
    directive?: 'if' | 'show';
}
declare const ulClasses: import("vue").Ref<string, string>, divClasses: import("vue").Ref<string, string>;
declare const tabsChildren: import("vue").ComputedRef<import("vue").VNode<import("vue").RendererNode, import("vue").RendererElement, {
    [key: string]: any;
}>[]>;
declare const modelValueRef: import("vue").WritableComputedRef<string, string>;
declare const emitClick: () => void;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_8: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    default?: (props: typeof __VLS_8) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<ITabsProps, {
    FwbTabPane: typeof FwbTabPane;
    ulClasses: typeof ulClasses;
    divClasses: typeof divClasses;
    tabsChildren: typeof tabsChildren;
    modelValueRef: typeof modelValueRef;
    emitClick: typeof emitClick;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    "click:pane": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<ITabsProps> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onClick:pane"?: ((...args: any[]) => any) | undefined;
}>, {
    variant: TabsVariant;
    modelValue: string;
    directive: "if" | "show";
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<ITabsProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (...args: any[]) => void;
    "click:pane": (...args: any[]) => void;
}, string, import("vue").PublicProps, Readonly<ITabsProps> & Readonly<{
    "onUpdate:modelValue"?: ((...args: any[]) => any) | undefined;
    "onClick:pane"?: ((...args: any[]) => any) | undefined;
}>, {
    variant: TabsVariant;
    modelValue: string;
    directive: "if" | "show";
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
