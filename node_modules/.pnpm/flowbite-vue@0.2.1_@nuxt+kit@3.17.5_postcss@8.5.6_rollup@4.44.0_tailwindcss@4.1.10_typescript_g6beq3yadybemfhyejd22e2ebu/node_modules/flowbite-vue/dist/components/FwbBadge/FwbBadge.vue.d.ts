import type { BadgeSize, BadgeType } from './types';
interface IBadgeProps {
    type?: BadgeType;
    size?: BadgeSize;
    href?: string | null;
}
declare const wrapperType: import("vue").ComputedRef<"a" | "span">;
declare const badgeClasses: import("vue").Ref<string, string>;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_6: {}, __VLS_8: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    icon?: (props: typeof __VLS_6) => any;
} & {
    default?: (props: typeof __VLS_8) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<IBadgeProps, {
    wrapperType: typeof wrapperType;
    badgeClasses: typeof badgeClasses;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<IBadgeProps> & Readonly<{}>, {
    type: BadgeType;
    size: BadgeSize;
    href: string | null;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<IBadgeProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {}, string, import("vue").PublicProps, Readonly<IBadgeProps> & Readonly<{}>, {
    type: BadgeType;
    size: BadgeSize;
    href: string | null;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
