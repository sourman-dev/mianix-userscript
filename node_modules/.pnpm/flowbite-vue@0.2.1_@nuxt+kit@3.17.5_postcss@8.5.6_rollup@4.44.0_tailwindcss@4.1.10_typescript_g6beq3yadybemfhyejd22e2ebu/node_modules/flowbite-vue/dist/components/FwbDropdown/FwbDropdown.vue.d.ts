import type { DropdownPlacement } from './types';
import type { ButtonVariant } from '../../components/FwbButton/types';
import FwbButton from '../../components/FwbButton/FwbButton.vue';
import FwbSlotListener from '../../components/utils/FwbSlotListener/FwbSlotListener.vue';
export interface DropdownProps {
    alignToEnd?: boolean;
    class?: string;
    closeInside?: boolean;
    color?: ButtonVariant;
    contentWrapperClass?: string;
    disabled?: boolean;
    placement?: DropdownPlacement;
    text?: string;
    transition?: string;
    triggerClass?: string;
    triggerWrapperClass?: string;
}
declare const dropdownWrapper: import("vue").Ref<HTMLDivElement | undefined, HTMLDivElement | undefined>;
declare const contentWrapper: import("vue").Ref<HTMLDivElement | undefined, HTMLDivElement | undefined>;
declare const isContentVisible: import("vue").Ref<boolean, boolean>;
declare const onToggle: () => boolean;
declare const onHide: () => false;
declare const transitionName: import("vue").ComputedRef<string>;
declare const contentStyles: import("vue").Ref<string, string>, contentWrapperClasses: import("vue").ComputedRef<string>, triggerSuffixClass: import("vue").ComputedRef<string>, triggerWrapperClasses: import("vue").ComputedRef<string>, wrapperClasses: import("vue").ComputedRef<string>;
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_8: {}, __VLS_24: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    trigger?: (props: typeof __VLS_8) => any;
} & {
    default?: (props: typeof __VLS_24) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<DropdownProps, {
    FwbButton: typeof FwbButton;
    FwbSlotListener: typeof FwbSlotListener;
    dropdownWrapper: typeof dropdownWrapper;
    contentWrapper: typeof contentWrapper;
    isContentVisible: typeof isContentVisible;
    onToggle: typeof onToggle;
    onHide: typeof onHide;
    transitionName: typeof transitionName;
    contentStyles: typeof contentStyles;
    contentWrapperClasses: typeof contentWrapperClasses;
    triggerSuffixClass: typeof triggerSuffixClass;
    triggerWrapperClasses: typeof triggerWrapperClasses;
    wrapperClasses: typeof wrapperClasses;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    show: () => any;
    hide: () => any;
}, string, import("vue").PublicProps, Readonly<DropdownProps> & Readonly<{
    onShow?: (() => any) | undefined;
    onHide?: (() => any) | undefined;
}>, {
    text: string;
    class: string;
    color: ButtonVariant;
    disabled: boolean;
    alignToEnd: boolean;
    closeInside: boolean;
    contentWrapperClass: string;
    placement: DropdownPlacement;
    transition: string;
    triggerClass: string;
    triggerWrapperClass: string;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<DropdownProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    show: () => any;
    hide: () => any;
}, string, import("vue").PublicProps, Readonly<DropdownProps> & Readonly<{
    onShow?: (() => any) | undefined;
    onHide?: (() => any) | undefined;
}>, {
    text: string;
    class: string;
    color: ButtonVariant;
    disabled: boolean;
    alignToEnd: boolean;
    closeInside: boolean;
    contentWrapperClass: string;
    placement: DropdownPlacement;
    transition: string;
    triggerClass: string;
    triggerWrapperClass: string;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
