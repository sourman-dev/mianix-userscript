interface CheckboxProps {
    class?: string | Record<string, boolean>;
    disabled?: boolean;
    label?: string;
    labelClass?: string | Record<string, boolean>;
    name?: string;
    value?: string | number | boolean | object;
    wrapperClass?: string | Record<string, boolean>;
}
type __VLS_Props = CheckboxProps;
declare const model: import("vue").ModelRef<boolean | (string | number | boolean | object)[], string, boolean | (string | number | boolean | object)[], boolean | (string | number | boolean | object)[]>;
declare const checkboxClass: import("vue").Ref<string, string>, helperMessageClass: import("vue").Ref<string, string>, labelClass: import("vue").Ref<string, string>, wrapperClass: import("vue").Ref<string, string>;
type __VLS_PublicProps = __VLS_Props & {
    modelValue?: boolean | (string | number | boolean | object)[];
};
declare const __VLS_ctx: InstanceType<__VLS_PickNotAny<typeof __VLS_self, new () => {}>>;
declare var __VLS_1: {}, __VLS_3: {};
type __VLS_Slots = __VLS_PrettifyGlobal<__VLS_OmitStringIndex<typeof __VLS_ctx.$slots> & {
    default?: (props: typeof __VLS_1) => any;
} & {
    helper?: (props: typeof __VLS_3) => any;
}>;
declare const __VLS_self: import("vue").DefineComponent<__VLS_PublicProps, {
    model: typeof model;
    checkboxClass: typeof checkboxClass;
    helperMessageClass: typeof helperMessageClass;
    labelClass: typeof labelClass;
    wrapperClass: typeof wrapperClass;
}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: boolean | (string | number | boolean | object)[]) => any;
}, string, import("vue").PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:modelValue"?: ((value: boolean | (string | number | boolean | object)[]) => any) | undefined;
}>, {
    label: string;
    value: string | number | boolean | object;
    class: string | Record<string, boolean>;
    disabled: boolean;
    name: string;
    labelClass: string | Record<string, boolean>;
    wrapperClass: string | Record<string, boolean>;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const __VLS_component: import("vue").DefineComponent<__VLS_PublicProps, {}, {}, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    "update:modelValue": (value: boolean | (string | number | boolean | object)[]) => any;
}, string, import("vue").PublicProps, Readonly<__VLS_PublicProps> & Readonly<{
    "onUpdate:modelValue"?: ((value: boolean | (string | number | boolean | object)[]) => any) | undefined;
}>, {
    label: string;
    value: string | number | boolean | object;
    class: string | Record<string, boolean>;
    disabled: boolean;
    name: string;
    labelClass: string | Record<string, boolean>;
    wrapperClass: string | Record<string, boolean>;
}, {}, {}, {}, string, import("vue").ComponentProvideOptions, false, {}, any>;
declare const _default: __VLS_WithSlots<typeof __VLS_component, __VLS_Slots>;
export default _default;
type __VLS_WithSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};
