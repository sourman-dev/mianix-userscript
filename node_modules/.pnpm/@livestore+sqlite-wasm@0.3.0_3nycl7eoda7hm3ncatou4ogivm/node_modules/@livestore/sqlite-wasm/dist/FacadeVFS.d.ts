import * as VFS from '@livestore/wa-sqlite/src/VFS.js';
export declare class FacadeVFS extends VFS.Base {
    #private;
    /**
     * @param {string} name
     * @param {object} module
     */
    constructor(name: any, module: any);
    /**
     * Override to indicate which methods are asynchronous.
     * @param {string} methodName
     * @returns {boolean}
     */
    hasAsyncMethod(methodName: any): boolean;
    /**
     * Return the filename for a file id for use by mixins.
     * @param {number} pFile
     * @returns {string}
     */
    getFilename(pFile: any): void;
    /**
     * @param {string?} filename
     * @param {number} pFile
     * @param {number} flags
     * @param {DataView} pOutFlags
     * @returns {number|Promise<number>}
     */
    jOpen(filename: any, pFile: any, flags: any, pOutFlags: any): number;
    /**
     * @param {string} filename
     * @param {number} syncDir
     * @returns {number|Promise<number>}
     */
    jDelete(filename: any, syncDir: any): number;
    /**
     * @param {string} filename
     * @param {number} flags
     * @param {DataView} pResOut
     * @returns {number|Promise<number>}
     */
    jAccess(filename: any, flags: any, pResOut: any): number;
    /**
     * @param {string} filename
     * @param {Uint8Array} zOut
     * @returns {number|Promise<number>}
     */
    jFullPathname(filename: any, zOut: any): number;
    /**
     * @param {Uint8Array} zBuf
     * @returns {number|Promise<number>}
     */
    jGetLastError(zBuf: any): 0;
    /**
     * @param {number} pFile
     * @returns {number|Promise<number>}
     */
    jClose(pFile: any): number;
    /**
     * @param {number} pFile
     * @param {Uint8Array} pData
     * @param {number} iOffset
     * @returns {number|Promise<number>}
     */
    jRead(pFile: any, pData: any, iOffset: any): number;
    /**
     * @param {number} pFile
     * @param {Uint8Array} pData
     * @param {number} iOffset
     * @returns {number|Promise<number>}
     */
    jWrite(pFile: any, pData: any, iOffset: any): number;
    /**
     * @param {number} pFile
     * @param {number} size
     * @returns {number|Promise<number>}
     */
    jTruncate(pFile: any, size: any): number;
    /**
     * @param {number} pFile
     * @param {number} flags
     * @returns {number|Promise<number>}
     */
    jSync(pFile: any, flags: any): number;
    /**
     * @param {number} pFile
     * @param {DataView} pSize
     * @returns {number|Promise<number>}
     */
    jFileSize(pFile: any, pSize: any): number;
    /**
     * @param {number} pFile
     * @param {number} lockType
     * @returns {number|Promise<number>}
     */
    jLock(pFile: any, lockType: any): number;
    /**
     * @param {number} pFile
     * @param {number} lockType
     * @returns {number|Promise<number>}
     */
    jUnlock(pFile: any, lockType: any): number;
    /**
     * @param {number} pFile
     * @param {DataView} pResOut
     * @returns {number|Promise<number>}
     */
    jCheckReservedLock(pFile: any, pResOut: any): number;
    /**
     * @param {number} pFile
     * @param {number} op
     * @param {DataView} pArg
     * @returns {number|Promise<number>}
     */
    jFileControl(pFile: any, op: any, pArg: any): number;
    /**
     * @param {number} pFile
     * @returns {number|Promise<number>}
     */
    jSectorSize(pFile: any): number;
    /**
     * @param {number} pFile
     * @returns {number|Promise<number>}
     */
    jDeviceCharacteristics(pFile: any): number;
    /**
     * @param {number} pVfs
     * @param {number} zName
     * @param {number} pFile
     * @param {number} flags
     * @param {number} pOutFlags
     * @returns {number|Promise<number>}
     */
    xOpen(pVfs: any, zName: any, pFile: any, flags: any, pOutFlags: any): number;
    /**
     * @param {number} pVfs
     * @param {number} zName
     * @param {number} syncDir
     * @returns {number|Promise<number>}
     */
    xDelete(pVfs: any, zName: any, syncDir: any): number;
    /**
     * @param {number} pVfs
     * @param {number} zName
     * @param {number} flags
     * @param {number} pResOut
     * @returns {number|Promise<number>}
     */
    xAccess(pVfs: any, zName: any, flags: any, pResOut: any): number;
    /**
     * @param {number} pVfs
     * @param {number} zName
     * @param {number} nOut
     * @param {number} zOut
     * @returns {number|Promise<number>}
     */
    xFullPathname(pVfs: any, zName: any, nOut: any, zOut: any): number;
    /**
     * @param {number} pVfs
     * @param {number} nBuf
     * @param {number} zBuf
     * @returns {number|Promise<number>}
     */
    xGetLastError(pVfs: any, nBuf: any, zBuf: any): 0;
    /**
     * @param {number} pFile
     * @returns {number|Promise<number>}
     */
    xClose(pFile: any): number;
    /**
     * @param {number} pFile
     * @param {number} pData
     * @param {number} iAmt
     * @param {number} iOffsetLo
     * @param {number} iOffsetHi
     * @returns {number|Promise<number>}
     */
    xRead(pFile: any, pData: any, iAmt: any, iOffsetLo: any, iOffsetHi: any): number;
    /**
     * @param {number} pFile
     * @param {number} pData
     * @param {number} iAmt
     * @param {number} iOffsetLo
     * @param {number} iOffsetHi
     * @returns {number|Promise<number>}
     */
    xWrite(pFile: any, pData: any, iAmt: any, iOffsetLo: any, iOffsetHi: any): number;
    /**
     * @param {number} pFile
     * @param {number} sizeLo
     * @param {number} sizeHi
     * @returns {number|Promise<number>}
     */
    xTruncate(pFile: any, sizeLo: any, sizeHi: any): number;
    /**
     * @param {number} pFile
     * @param {number} flags
     * @returns {number|Promise<number>}
     */
    xSync(pFile: any, flags: any): number;
    /**
     *
     * @param {number} pFile
     * @param {number} pSize
     * @returns {number|Promise<number>}
     */
    xFileSize(pFile: any, pSize: any): number;
    /**
     * @param {number} pFile
     * @param {number} lockType
     * @returns {number|Promise<number>}
     */
    xLock(pFile: any, lockType: any): number;
    /**
     * @param {number} pFile
     * @param {number} lockType
     * @returns {number|Promise<number>}
     */
    xUnlock(pFile: any, lockType: any): number;
    /**
     * @param {number} pFile
     * @param {number} pResOut
     * @returns {number|Promise<number>}
     */
    xCheckReservedLock(pFile: any, pResOut: any): number;
    /**
     * @param {number} pFile
     * @param {number} op
     * @param {number} pArg
     * @returns {number|Promise<number>}
     */
    xFileControl(pFile: any, op: any, pArg: any): number;
    /**
     * @param {number} pFile
     * @returns {number|Promise<number>}
     */
    xSectorSize(pFile: any): number;
    /**
     * @param {number} pFile
     * @returns {number|Promise<number>}
     */
    xDeviceCharacteristics(pFile: any): number;
}
//# sourceMappingURL=FacadeVFS.d.ts.map