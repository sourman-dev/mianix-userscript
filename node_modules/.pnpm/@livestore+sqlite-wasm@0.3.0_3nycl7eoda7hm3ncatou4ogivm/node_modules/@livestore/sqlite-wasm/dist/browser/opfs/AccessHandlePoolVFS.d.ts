import { FacadeVFS } from '../../FacadeVFS.js';
/**
 * This VFS uses the updated Access Handle API with all synchronous methods
 * on FileSystemSyncAccessHandle (instead of just read and write). It will
 * work with the regular SQLite WebAssembly build, i.e. the one without
 * Asyncify.
 */
export declare class AccessHandlePoolVFS extends FacadeVFS {
    #private;
    log: null;
    static create(name: string, directoryPath: string, module: any): Promise<AccessHandlePoolVFS>;
    constructor(name: string, directoryPath: string, module: any);
    getOpfsFileName(zName: string): string;
    resetAccessHandle(zName: string): void;
    jOpen(zName: string, fileId: number, flags: number, pOutFlags: DataView): number;
    jClose(fileId: number): number;
    jRead(fileId: number, pData: Uint8Array, iOffset: number): number;
    jWrite(fileId: number, pData: Uint8Array, iOffset: number): number;
    jTruncate(fileId: number, iSize: number): number;
    jSync(fileId: number, _flags: number): number;
    jFileSize(fileId: number, pSize64: DataView): number;
    jSectorSize(_fileId: number): number;
    jDeviceCharacteristics(_fileId: number): number;
    jAccess(zName: string, flags: number, pResOut: DataView): number;
    jDelete(zName: string, _syncDir: number): number;
    close(): Promise<void>;
    isReady(): Promise<boolean>;
    /**
     * Returns the number of SQLite files in the file system.
     */
    getSize(): number;
    /**
     * Returns the maximum number of SQLite files the file system can hold.
     */
    getCapacity(): number;
    /**
     * Increase the capacity of the file system by n.
     */
    addCapacity(n: number): Promise<number>;
    /**
     * Decrease the capacity of the file system by n. The capacity cannot be
     * decreased to fewer than the current number of SQLite files in the
     * file system.
     */
    removeCapacity(n: number): Promise<number>;
}
//# sourceMappingURL=AccessHandlePoolVFS.d.ts.map