import { Devtools } from '@livestore/common';
import type { LiveStoreSchema } from '@livestore/common/schema';
import * as DevtoolsWeb from '@livestore/devtools-web-common/web-channel';
import type { Worker } from '@livestore/utils/effect';
import { Effect } from '@livestore/utils/effect';
import * as Webmesh from '@livestore/webmesh';
export declare const logDevtoolsUrl: ({ schema, storeId, clientId, sessionId, }: {
    schema: LiveStoreSchema;
    storeId: string;
    clientId: string;
    sessionId: string;
}) => Effect.Effect<void, never, never>;
export declare const connectWebmeshNodeClientSession: (this: unknown, args_0: {
    webmeshNode: Webmesh.MeshNode;
    sessionInfo: Devtools.SessionInfo.SessionInfo;
    sharedWorker: Worker.SerializedWorkerPool<typeof DevtoolsWeb.WorkerSchema.Request.Type>;
    devtoolsEnabled: boolean;
    schema: LiveStoreSchema;
}) => Effect.Effect<void, import("@livestore/common").UnexpectedError, import("effect/Scope").Scope>;
//# sourceMappingURL=client-session-devtools.d.ts.map