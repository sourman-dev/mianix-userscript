import { Devtools, LeaderAheadError, SyncState, UnexpectedError } from '@livestore/common';
import * as WebmeshWorker from '@livestore/devtools-web-common/worker';
import { Schema } from '@livestore/utils/effect';
export declare const StorageTypeOpfs: Schema.Struct<{
    type: Schema.Literal<["opfs"]>;
    /**
     * Default is `livestore-${storeId}`
     *
     * When providing this option, make sure to include the `storeId` in the path to avoid
     * conflicts with other LiveStore apps.
     */
    directory: Schema.optional<typeof Schema.String>;
}>;
export type StorageTypeOpfs = typeof StorageTypeOpfs.Type;
export declare const StorageType: Schema.Struct<{
    type: Schema.Literal<["opfs"]>;
    /**
     * Default is `livestore-${storeId}`
     *
     * When providing this option, make sure to include the `storeId` in the path to avoid
     * conflicts with other LiveStore apps.
     */
    directory: Schema.optional<typeof Schema.String>;
}>;
export type StorageType = typeof StorageType.Type;
export type StorageTypeEncoded = typeof StorageType.Encoded;
export declare const SyncBackendOptions: Schema.Record$<typeof Schema.String, Schema.Schema<Schema.JsonValue, Schema.JsonValue, never>>;
export type SyncBackendOptions = Record<string, Schema.JsonValue>;
export declare namespace LeaderWorkerOuter {
    const InitialMessage_base: Schema.TaggedRequestClass<InitialMessage, "InitialMessage", {
        readonly _tag: Schema.tag<"InitialMessage">;
    } & {
        port: Schema.Schema<MessagePort, MessagePort, never>;
        storeId: typeof Schema.String;
        clientId: typeof Schema.String;
    }, typeof Schema.Void, typeof UnexpectedError>;
    export class InitialMessage extends InitialMessage_base {
    }
    const Request_base: typeof InitialMessage;
    export class Request extends Request_base {
    }
    export {};
}
export declare namespace LeaderWorkerInner {
    const InitialMessage_base_1: Schema.TaggedRequestClass<InitialMessage, "InitialMessage", {
        readonly _tag: Schema.tag<"InitialMessage">;
    } & {
        storageOptions: Schema.Struct<{
            type: Schema.Literal<["opfs"]>;
            /**
             * Default is `livestore-${storeId}`
             *
             * When providing this option, make sure to include the `storeId` in the path to avoid
             * conflicts with other LiveStore apps.
             */
            directory: Schema.optional<typeof Schema.String>;
        }>;
        devtoolsEnabled: typeof Schema.Boolean;
        storeId: typeof Schema.String;
        clientId: typeof Schema.String;
        debugInstanceId: typeof Schema.String;
        syncPayload: Schema.UndefinedOr<Schema.Schema<Schema.JsonValue, Schema.JsonValue, never>>;
    }, typeof Schema.Void, typeof UnexpectedError>;
    export class InitialMessage extends InitialMessage_base_1 {
    }
    const BootStatusStream_base: Schema.TaggedRequestClass<BootStatusStream, "BootStatusStream", {
        readonly _tag: Schema.tag<"BootStatusStream">;
    }, Schema.Union<[Schema.Struct<{
        stage: Schema.Literal<["loading"]>;
    }>, Schema.Struct<{
        stage: Schema.Literal<["migrating"]>;
        progress: Schema.Struct<{
            done: typeof Schema.Number;
            total: typeof Schema.Number;
        }>;
    }>, Schema.Struct<{
        stage: Schema.Literal<["rehydrating"]>;
        progress: Schema.Struct<{
            done: typeof Schema.Number;
            total: typeof Schema.Number;
        }>;
    }>, Schema.Struct<{
        stage: Schema.Literal<["syncing"]>;
        progress: Schema.Struct<{
            done: typeof Schema.Number;
            total: typeof Schema.Number;
        }>;
    }>, Schema.Struct<{
        stage: Schema.Literal<["done"]>;
    }>]>, typeof UnexpectedError>;
    export class BootStatusStream extends BootStatusStream_base {
    }
    const PushToLeader_base: Schema.TaggedRequestClass<PushToLeader, "PushToLeader", {
        readonly _tag: Schema.tag<"PushToLeader">;
    } & {
        batch: Schema.Array$<Schema.Struct<{
            name: typeof Schema.String;
            args: typeof Schema.Any;
            seqNum: Schema.Struct<{
                global: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
                client: Schema.BrandSchema<number & import("effect/Brand").Brand<"ClientEventSequenceNumber">, number, never>;
            }>;
            parentSeqNum: Schema.Struct<{
                global: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
                client: Schema.BrandSchema<number & import("effect/Brand").Brand<"ClientEventSequenceNumber">, number, never>;
            }>;
            clientId: typeof Schema.String;
            sessionId: typeof Schema.String;
        }>>;
    }, typeof Schema.Void, Schema.Union<[typeof UnexpectedError, typeof LeaderAheadError]>>;
    export class PushToLeader extends PushToLeader_base {
    }
    const PullStream_base: Schema.TaggedRequestClass<PullStream, "PullStream", {
        readonly _tag: Schema.tag<"PullStream">;
    } & {
        cursor: Schema.Struct<{
            mergeCounter: typeof Schema.Number;
            eventNum: Schema.Struct<{
                global: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
                client: Schema.BrandSchema<number & import("effect/Brand").Brand<"ClientEventSequenceNumber">, number, never>;
            }>;
        }>;
    }, Schema.Struct<{
        payload: typeof SyncState.PayloadUpstream;
        mergeCounter: typeof Schema.Number;
    }>, typeof UnexpectedError>;
    export class PullStream extends PullStream_base {
    }
    const Export_base: Schema.TaggedRequestClass<Export, "Export", {
        readonly _tag: Schema.tag<"Export">;
    }, Schema.Schema<Uint8Array<ArrayBufferLike>, Uint8Array<ArrayBufferLike>, never>, typeof UnexpectedError>;
    export class Export extends Export_base {
    }
    const ExportEventlog_base: Schema.TaggedRequestClass<ExportEventlog, "ExportEventlog", {
        readonly _tag: Schema.tag<"ExportEventlog">;
    }, Schema.Schema<Uint8Array<ArrayBufferLike>, Uint8Array<ArrayBufferLike>, never>, typeof UnexpectedError>;
    export class ExportEventlog extends ExportEventlog_base {
    }
    const GetRecreateSnapshot_base: Schema.TaggedRequestClass<GetRecreateSnapshot, "GetRecreateSnapshot", {
        readonly _tag: Schema.tag<"GetRecreateSnapshot">;
    }, Schema.Struct<{
        snapshot: Schema.Schema<Uint8Array<ArrayBufferLike>, Uint8Array<ArrayBufferLike>, never>;
        migrationsReport: Schema.Struct<{
            migrations: Schema.Array$<Schema.Struct<{
                tableName: typeof Schema.String;
                hashes: Schema.Struct<{
                    expected: typeof Schema.Number;
                    actual: Schema.optional<typeof Schema.Number>;
                }>;
            }>>;
        }>;
    }>, typeof UnexpectedError>;
    export class GetRecreateSnapshot extends GetRecreateSnapshot_base {
    }
    const GetLeaderHead_base: Schema.TaggedRequestClass<GetLeaderHead, "GetLeaderHead", {
        readonly _tag: Schema.tag<"GetLeaderHead">;
    }, Schema.Struct<{
        global: Schema.BrandSchema<number & import("effect/Brand").Brand<"GlobalEventSequenceNumber">, number, never>;
        client: Schema.BrandSchema<number & import("effect/Brand").Brand<"ClientEventSequenceNumber">, number, never>;
    }>, typeof UnexpectedError>;
    export class GetLeaderHead extends GetLeaderHead_base {
    }
    const GetLeaderSyncState_base: Schema.TaggedRequestClass<GetLeaderSyncState, "GetLeaderSyncState", {
        readonly _tag: Schema.tag<"GetLeaderSyncState">;
    }, typeof SyncState.SyncState, typeof UnexpectedError>;
    export class GetLeaderSyncState extends GetLeaderSyncState_base {
    }
    const Shutdown_base: Schema.TaggedRequestClass<Shutdown, "Shutdown", {
        readonly _tag: Schema.tag<"Shutdown">;
    }, typeof Schema.Void, typeof UnexpectedError>;
    export class Shutdown extends Shutdown_base {
    }
    const ExtraDevtoolsMessage_base: Schema.TaggedRequestClass<ExtraDevtoolsMessage, "ExtraDevtoolsMessage", {
        readonly _tag: Schema.tag<"ExtraDevtoolsMessage">;
    } & {
        message: Schema.Union<[typeof Devtools.Leader.SnapshotReq, Schema.TaggedStruct<"LSD.Leader.LoadDatabaseFile.Request", {
            data: Schema.Schema<Uint8Array<ArrayBufferLike>, Uint8Array<ArrayBufferLike>, never>;
        } & {
            readonly requestId: typeof Schema.String;
            readonly liveStoreVersion: typeof import("@livestore/common/dist/devtools/devtools-messages-common.js").liveStoreVersion;
            readonly clientId: typeof Schema.String;
        }>, typeof Devtools.Leader.EventlogReq, Schema.TaggedStruct<"LSD.Leader.ResetAllData.Request", {
            mode: Schema.Literal<["all-data", "only-app-db"]>;
        } & {
            readonly requestId: typeof Schema.String;
            readonly liveStoreVersion: typeof import("@livestore/common/dist/devtools/devtools-messages-common.js").liveStoreVersion;
            readonly clientId: typeof Schema.String;
        }>, typeof Devtools.Leader.NetworkStatusSubscribe, typeof Devtools.Leader.NetworkStatusUnsubscribe, typeof Devtools.Leader.Disconnect, typeof Devtools.Leader.CommitEventReq, typeof Devtools.Leader.Ping, typeof Devtools.Leader.DatabaseFileInfoReq, typeof Devtools.Leader.SyncHistorySubscribe, typeof Devtools.Leader.SyncHistoryUnsubscribe, typeof Devtools.Leader.SyncingInfoReq, typeof Devtools.Leader.SyncHeadSubscribe, typeof Devtools.Leader.SyncHeadUnsubscribe, Schema.TaggedStruct<"LSD.Leader.SetSyncLatch.Request", {
            closeLatch: typeof Schema.Boolean;
        } & {
            readonly requestId: typeof Schema.String;
            readonly liveStoreVersion: typeof import("@livestore/common/dist/devtools/devtools-messages-common.js").liveStoreVersion;
            readonly clientId: typeof Schema.String;
        }>]>;
    }, typeof Schema.Void, typeof UnexpectedError>;
    export class ExtraDevtoolsMessage extends ExtraDevtoolsMessage_base {
    }
    export const Request: Schema.Union<[typeof InitialMessage, typeof BootStatusStream, typeof PushToLeader, typeof PullStream, typeof Export, typeof ExportEventlog, typeof GetRecreateSnapshot, typeof GetLeaderHead, typeof GetLeaderSyncState, typeof Shutdown, typeof ExtraDevtoolsMessage, typeof WebmeshWorker.Schema.CreateConnection]>;
    export type Request = typeof Request.Type;
    export {};
}
export declare namespace SharedWorker {
    const InitialMessagePayloadFromClientSession_base: Schema.TaggedStruct<"FromClientSession", {
        initialMessage: typeof LeaderWorkerInner.InitialMessage;
    }>;
    export class InitialMessagePayloadFromClientSession extends InitialMessagePayloadFromClientSession_base {
    }
    const InitialMessage_base_2: Schema.TaggedRequestClass<InitialMessage, "InitialMessage", {
        readonly _tag: Schema.tag<"InitialMessage">;
    } & {
        payload: Schema.Union<[typeof InitialMessagePayloadFromClientSession, Schema.TaggedStruct<"FromWebBridge", {}>]>;
        liveStoreVersion: Schema.Literal<["0.3.1"]>;
    }, typeof Schema.Void, typeof UnexpectedError>;
    export class InitialMessage extends InitialMessage_base_2 {
    }
    const UpdateMessagePort_base: Schema.TaggedRequestClass<UpdateMessagePort, "UpdateMessagePort", {
        readonly _tag: Schema.tag<"UpdateMessagePort">;
    } & {
        port: Schema.Schema<MessagePort, MessagePort, never>;
    }, typeof Schema.Void, typeof UnexpectedError>;
    export class UpdateMessagePort extends UpdateMessagePort_base {
    }
    const Request_base_1: Schema.Union<[typeof InitialMessage, typeof UpdateMessagePort, typeof LeaderWorkerInner.BootStatusStream, typeof LeaderWorkerInner.PushToLeader, typeof LeaderWorkerInner.PullStream, typeof LeaderWorkerInner.Export, typeof LeaderWorkerInner.GetRecreateSnapshot, typeof LeaderWorkerInner.ExportEventlog, typeof LeaderWorkerInner.GetLeaderHead, typeof LeaderWorkerInner.GetLeaderSyncState, typeof LeaderWorkerInner.Shutdown, typeof LeaderWorkerInner.ExtraDevtoolsMessage, typeof WebmeshWorker.Schema.CreateConnection]>;
    export class Request extends Request_base_1 {
    }
    export {};
}
//# sourceMappingURL=worker-schema.d.ts.map