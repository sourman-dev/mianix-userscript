import type { Adapter } from '@livestore/common';
import * as WorkerSchema from '../common/worker-schema.js';
export type WebAdapterOptions = {
    worker: ((options: {
        name: string;
    }) => globalThis.Worker) | (new (options: {
        name: string;
    }) => globalThis.Worker);
    /**
     * This is mostly an implementation detail and needed to be exposed into app code
     * due to a current Vite limitation (https://github.com/vitejs/vite/issues/8427).
     *
     * In most cases this should look like:
     * ```ts
     * import LiveStoreSharedWorker from '@livestore/adapter-web/shared-worker?sharedworker'
     *
     * const adapter = makePersistedAdapter({
     *   sharedWorker: LiveStoreSharedWorker,
     *   // ...
     * })
     * ```
     */
    sharedWorker: ((options: {
        name: string;
    }) => globalThis.SharedWorker) | (new (options: {
        name: string;
    }) => globalThis.SharedWorker);
    /**
     * Specifies where to persist data for this adapter
     */
    storage: WorkerSchema.StorageTypeEncoded;
    /**
     * Warning: This will reset both the app and eventlog database.
     * This should only be used during development.
     *
     * @default false
     */
    resetPersistence?: boolean;
    /**
     * By default the adapter will initially generate a random clientId (via `nanoid(5)`),
     * store it in `localStorage` and restore it for subsequent client sessions. It's the same across all tabs/windows.
     */
    clientId?: string;
    /**
     * By default the adapter will initially generate a random sessionId (via `nanoid(5)`),
     * store it in `sessionStorage` and restore it for subsequent client sessions in the same tab/window.
     */
    sessionId?: string;
    experimental?: {
        /**
         * When set to `true`, the adapter will always start with a snapshot from the leader
         * instead of trying to load a snapshot from storage.
         *
         * @default false
         */
        disableFastPath?: boolean;
    };
};
/**
 * Creates a web adapter with persistent storage (currently only supports OPFS).
 * Requires both a web worker and a shared worker.
 *
 * @example
 * ```ts
 * import { makePersistedAdapter } from '@livestore/adapter-web'
 * import LiveStoreWorker from './livestore.worker?worker'
 * import LiveStoreSharedWorker from '@livestore/adapter-web/shared-worker?sharedworker'
 *
 * const adapter = makePersistedAdapter({
 *   worker: LiveStoreWorker,
 *   sharedWorker: LiveStoreSharedWorker,
 *   storage: { type: 'opfs' },
 * })
 * ```
 */
export declare const makePersistedAdapter: (options: WebAdapterOptions) => Adapter;
//# sourceMappingURL=persisted-adapter.d.ts.map