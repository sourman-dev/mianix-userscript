import { inject, shallowRef, onUnmounted, computed, defineComponent, ref, provide } from 'vue';
import { queryDb, createStorePromise } from '@livestore/livestore';

const LiveStoreKey = Symbol("LiveStore");
const withVueApi = (store) => {
  store.useQuery = (queryDef) => useQuery(queryDef, { store });
  return store;
};
const useStore = (options) => {
  if (options?.store) {
    return { store: withVueApi(options.store) };
  }
  return { store: inject(LiveStoreKey) };
};

const useQuery = (queryDef, options) => {
  const { store } = useStore(options);
  const data = shallowRef(store?.query(queryDef));
  const unsubscribe = store?.subscribe(queryDef, {
    // eslint-disable-line @typescript-eslint/no-explicit-any
    onUpdate: (result) => {
      data.value = result;
    }
  });
  onUnmounted(() => unsubscribe?.());
  return data;
};

function useClientDocument(table, id, options) {
  const { store } = useStore();
  if (!store) {
    throw new Error("Store not found. Make sure you are using LiveStoreProvider.");
  }
  const documentId = id ?? table.default?.id;
  if (!documentId) {
    throw new Error("Client document requires an ID");
  }
  const query$ = queryDb(table.get(documentId, options));
  const state = shallowRef(store.query(query$));
  const unsubscribe = store.subscribe(query$, {
    onUpdate: (result) => {
      state.value = result;
    }
  });
  const setState = (value) => {
    store.commit(table.set(value, documentId));
  };
  const computedFields = {};
  for (const key in state.value) {
    computedFields[key] = computed({
      get: () => state.value[key],
      set: (value) => {
        setState({ ...state.value, [key]: value });
      }
    });
  }
  onUnmounted(() => unsubscribe());
  return {
    ...computedFields,
    id: documentId,
    query$
  };
}

const LiveStoreProvider = defineComponent({
  name: "LiveStoreProvider",
  props: {
    options: {
      type: Object,
      required: true
    }
  },
  setup(props, { slots }) {
    const storeRef = ref();
    provide(
      LiveStoreKey,
      // eslint-disable-next-line @typescript-eslint/no-explicit-any
      new Proxy({}, {
        get(_, key) {
          if (!storeRef.value) throw new Error("LiveStore not initialized yet");
          return storeRef.value[key];
        }
      })
    );
    createStorePromise(props.options).then((store) => {
      storeRef.value = withVueApi(store);
    });
    return () => {
      if (!storeRef.value) {
        return slots.loading ? slots.loading() : null;
      }
      return slots.default ? slots.default() : [];
    };
  }
});

export { LiveStoreProvider, useClientDocument, useQuery, useStore };
