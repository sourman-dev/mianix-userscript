import { Ref, WritableComputedRef } from 'vue';
import { LiveQueryDef, Store, State, SessionIdSymbol, RowQuery } from '@livestore/livestore';
import { LiveQueries } from '@livestore/livestore/internal';

declare const useQuery: <TQuery extends LiveQueryDef.Any>(queryDef: TQuery, options?: {
    store: Store;
}) => Readonly<Ref<LiveQueries.GetResult<TQuery>>>;

declare const useStore: (options?: {
    store: Store;
}) => {
    store: any;
};

type ClientDocumentTable<Value extends Record<string, any>> = State.SQLite.ClientDocumentTableDef.Trait<any, any, Value, {
    partialSet: boolean;
    default: {
        id: string | SessionIdSymbol;
        value: Value;
    };
}>;
type UseClientDocumentResult<Value extends Record<string, any>> = {
    id: string | typeof SessionIdSymbol;
    query$: LiveQueryDef<Value>;
} & {
    [K in keyof Value]: WritableComputedRef<Value[K]>;
};
declare function useClientDocument<Value extends Record<string, any>>(table: ClientDocumentTable<Value>, id?: string | typeof SessionIdSymbol, options?: RowQuery.GetOrCreateOptions<ClientDocumentTable<Value>>): UseClientDocumentResult<Value>;

declare const LiveStoreProvider: any;

export { LiveStoreProvider, useClientDocument, useQuery, useStore };
